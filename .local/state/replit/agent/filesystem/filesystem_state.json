{"file_contents":{"app.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom utils.auth import init_session_state, is_authenticated\nfrom utils.data_manager import init_data_files\n\n# Initialize data files and session state\ninit_data_files()\ninit_session_state()\n\n# Page configuration\nst.set_page_config(\n    page_title=\"AI Learning Mentor\",\n    page_icon=\"üéì\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\n# Custom CSS for better styling\nst.markdown(\"\"\"\n<style>\n    .main-header {\n        text-align: center;\n        padding: 2rem 0;\n    }\n    .feature-card {\n        padding: 1.5rem;\n        border-radius: 10px;\n        border: 1px solid #ddd;\n        margin: 1rem 0;\n    }\n    .hero-section {\n        text-align: center;\n        padding: 3rem 0;\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\ndef main():\n    # Landing Page\n    st.markdown('<div class=\"hero-section\">', unsafe_allow_html=True)\n    \n    st.title(\"üéì AI Learning Mentor\")\n    st.markdown(\"### Your Personalized AI-Powered Learning Companion\")\n    \n    st.markdown(\"\"\"\n    Transform your learning journey with intelligent project suggestions, \n    personalized roadmaps, and 24/7 AI mentorship guidance.\n    \"\"\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n    \n    # Features section\n    st.markdown(\"## ‚ú® Key Features\")\n    \n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h4>üéØ Smart Project Suggestions</h4>\n            <p>Get AI-curated project recommendations based on your interests and skill level</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col2:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h4>üó∫Ô∏è Personalized Roadmaps</h4>\n            <p>Receive custom learning paths tailored to your goals and current expertise</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col3:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h4>ü§ñ AI Chatbot Mentor</h4>\n            <p>Get instant help, guidance, and answers to your learning questions</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    # Authentication section\n    st.markdown(\"## üöÄ Get Started\")\n    \n    if not is_authenticated():\n        col1, col2, col3 = st.columns([1, 2, 1])\n        with col2:\n            st.info(\"üëã Welcome! Please sign up or log in to access your personalized learning experience.\")\n            \n            if st.button(\"üîê Go to Login/Signup\", type=\"primary\", use_container_width=True):\n                st.switch_page(\"pages/1_Login.py\")\n    else:\n        st.success(f\"Welcome back, {st.session_state.user_data['name']}!\")\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            if st.button(\"üéØ Get Project Suggestions\", type=\"primary\", use_container_width=True):\n                st.switch_page(\"pages/3_Project_Suggestions.py\")\n        \n        with col2:\n            if st.button(\"üó∫Ô∏è View Learning Roadmap\", use_container_width=True):\n                st.switch_page(\"pages/4_Learning_Roadmap.py\")\n        \n        col3, col4 = st.columns(2)\n        with col3:\n            if st.button(\"üí¨ Chat with AI Mentor\", use_container_width=True):\n                st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n        \n        with col4:\n            if st.button(\"üìä Track Progress\", use_container_width=True):\n                st.switch_page(\"pages/6_Progress_Tracking.py\")\n    \n    # Sidebar navigation\n    with st.sidebar:\n        st.markdown(\"### üß≠ Navigation\")\n        \n        if is_authenticated():\n            st.markdown(f\"**Logged in as:** {st.session_state.user_data['name']}\")\n            st.markdown(\"---\")\n            \n            if st.button(\"üë§ Profile Setup\"):\n                st.switch_page(\"pages/2_Profile_Setup.py\")\n            \n            if st.button(\"üéØ Project Suggestions\"):\n                st.switch_page(\"pages/3_Project_Suggestions.py\")\n            \n            if st.button(\"üó∫Ô∏è Learning Roadmap\"):\n                st.switch_page(\"pages/4_Learning_Roadmap.py\")\n            \n            if st.button(\"üí¨ Chatbot Mentor\"):\n                st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n            \n            if st.button(\"üìä Progress Tracking\"):\n                st.switch_page(\"pages/6_Progress_Tracking.py\")\n            \n            st.markdown(\"---\")\n            if st.button(\"üö™ Logout\"):\n                for key in list(st.session_state.keys()):\n                    del st.session_state[key]\n                st.rerun()\n        else:\n            if st.button(\"üîê Login/Signup\"):\n                st.switch_page(\"pages/1_Login.py\")\n        \n        st.markdown(\"---\")\n        st.markdown(\"### üìù About\")\n        st.markdown(\"\"\"\n        This AI Learning Mentor helps you discover projects, \n        create learning roadmaps, and provides personalized guidance \n        throughout your learning journey.\n        \"\"\")\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":4983},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"google-genai>=1.33.0\",\n    \"pandas>=2.3.2\",\n    \"plotly>=6.3.0\",\n    \"streamlit>=1.49.1\",\n]\n","size_bytes":239},"replit.md":{"content":"# AI Learning Mentor\n\n## Overview\n\nAI Learning Mentor is a personalized AI-powered learning companion built with Streamlit. The application provides users with intelligent project suggestions, customized learning roadmaps, and 24/7 AI mentorship through an integrated chatbot. The system tracks user progress and adapts recommendations based on individual learning profiles, experience levels, and interests.\n\nThe application follows a multi-page architecture where users can register, set up detailed profiles, generate AI-powered project suggestions, create learning roadmaps, chat with an AI mentor, and track their learning progress through an interactive dashboard.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Streamlit-based web application with multi-page navigation\n- **UI Components**: Custom CSS styling with feature cards, hero sections, and responsive layouts\n- **Page Structure**: Main app.py landing page with dedicated pages for login, profile setup, project suggestions, roadmaps, chatbot, and progress tracking\n- **State Management**: Streamlit session state for user authentication, data persistence across pages, and chat message history\n\n### Backend Architecture\n- **Authentication System**: Custom email/password authentication with SHA256 password hashing\n- **Data Processing**: Pandas-based data manipulation for user profiles, project suggestions, and progress tracking\n- **AI Integration**: Google Gemini API client for generating personalized project suggestions, learning roadmaps, and chatbot interactions\n- **File-based Storage**: CSV files for persistent data storage across all application entities\n\n### Data Storage Solutions\n- **Storage Type**: File-based CSV storage system\n- **Data Files**: \n  - users.csv for authentication and profile data\n  - roadmaps.csv for learning path storage\n  - interactions.csv for user activity tracking\n  - chat_history.csv for conversation persistence\n  - progress.csv for achievement tracking\n- **Data Management**: Centralized data manager utility with functions for loading, saving, and initializing data files\n- **User Data**: Comprehensive profile system including experience level, interests, skills, learning preferences, and goals\n\n### Authentication and Authorization\n- **Authentication Method**: Email and password-based system with hashed passwords\n- **Session Management**: Streamlit session state for maintaining authentication status\n- **Access Control**: Page-level authentication requirements with automatic redirection to login\n- **User Registration**: Multi-step registration with profile completion\n\n## External Dependencies\n\n### AI Services\n- **Google Gemini API**: Primary AI service for generating project suggestions, learning roadmaps, and powering the chatbot mentor functionality\n- **API Configuration**: Environment variable-based API key management\n\n### Python Libraries\n- **streamlit**: Core web application framework for UI and routing\n- **pandas**: Data manipulation and CSV file operations\n- **plotly**: Interactive charts and visualizations for progress tracking dashboard\n- **google-genai**: Official Google Gemini API client library\n\n### Data Visualization\n- **Plotly Express & Graph Objects**: Interactive charts for learning progress visualization, activity tracking, and achievement metrics\n\n### Development Environment\n- **File System**: Local CSV-based storage requiring read/write permissions to data directory\n- **Environment Variables**: GEMINI_API_KEY for AI service authentication","size_bytes":3595},"pages/1_Login.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom utils.auth import authenticate_user, register_user, init_session_state\nfrom utils.data_manager import load_users, save_user\n\nst.set_page_config(page_title=\"Login - AI Learning Mentor\", page_icon=\"üîê\")\n\ninit_session_state()\n\nst.title(\"üîê Login / Sign Up\")\n\n# Create tabs for login and signup\ntab1, tab2 = st.tabs([\"üîë Login\", \"üìù Sign Up\"])\n\nwith tab1:\n    st.header(\"Welcome Back!\")\n    \n    with st.form(\"login_form\"):\n        email = st.text_input(\"Email\", placeholder=\"Enter your email\")\n        password = st.text_input(\"Password\", type=\"password\", placeholder=\"Enter your password\")\n        \n        if st.form_submit_button(\"Login\", type=\"primary\", use_container_width=True):\n            if email and password:\n                user_data = authenticate_user(email, password)\n                if user_data:\n                    st.session_state.authenticated = True\n                    st.session_state.user_data = user_data\n                    st.success(\"Login successful!\")\n                    st.rerun()\n                else:\n                    st.error(\"Invalid email or password. Please try again.\")\n            else:\n                st.error(\"Please fill in all fields.\")\n\nwith tab2:\n    st.header(\"Create Your Account\")\n    \n    with st.form(\"signup_form\"):\n        name = st.text_input(\"Full Name\", placeholder=\"Enter your full name\")\n        email = st.text_input(\"Email\", placeholder=\"Enter your email address\")\n        password = st.text_input(\"Password\", type=\"password\", placeholder=\"Create a password\")\n        confirm_password = st.text_input(\"Confirm Password\", type=\"password\", placeholder=\"Confirm your password\")\n        \n        # Basic profile information\n        st.markdown(\"**Tell us a bit about yourself:**\")\n        experience_level = st.selectbox(\n            \"Experience Level\",\n            [\"Beginner\", \"Intermediate\", \"Advanced\", \"Expert\"]\n        )\n        \n        if st.form_submit_button(\"Create Account\", type=\"primary\", use_container_width=True):\n            if name and email and password and confirm_password:\n                if password != confirm_password:\n                    st.error(\"Passwords do not match.\")\n                elif len(password) < 6:\n                    st.error(\"Password must be at least 6 characters long.\")\n                else:\n                    # Check if user already exists\n                    users_df = load_users()\n                    if email in users_df['email'].values:\n                        st.error(\"An account with this email already exists.\")\n                    else:\n                        # Register new user\n                        user_data = {\n                            'name': name,\n                            'email': email,\n                            'password': password,\n                            'experience_level': experience_level,\n                            'interests': '',\n                            'skills': '',\n                            'goals': '',\n                            'created_at': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')\n                        }\n                        \n                        if register_user(user_data):\n                            st.session_state.authenticated = True\n                            st.session_state.user_data = user_data\n                            st.success(\"Account created successfully! Welcome to AI Learning Mentor!\")\n                            st.rerun()\n                        else:\n                            st.error(\"Failed to create account. Please try again.\")\n            else:\n                st.error(\"Please fill in all fields.\")\n\n# If user is authenticated, redirect to profile setup or home\nif st.session_state.authenticated:\n    st.balloons()\n    st.success(f\"Welcome, {st.session_state.user_data['name']}!\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        if st.button(\"üè† Go to Home\", use_container_width=True):\n            st.switch_page(\"app.py\")\n    \n    with col2:\n        if st.button(\"üë§ Complete Profile Setup\", type=\"primary\", use_container_width=True):\n            st.switch_page(\"pages/2_Profile_Setup.py\")\n\n# Back to home button\nif st.button(\"‚Üê Back to Home\"):\n    st.switch_page(\"app.py\")\n","size_bytes":4272},"pages/2_Profile_Setup.py":{"content":"import streamlit as st\nimport pandas as pd\nfrom utils.auth import init_session_state, is_authenticated, require_auth\nfrom utils.data_manager import save_user_profile\n\nst.set_page_config(page_title=\"Profile Setup - AI Learning Mentor\", page_icon=\"üë§\")\n\ninit_session_state()\nrequire_auth()\n\nst.title(\"üë§ Profile Setup\")\nst.markdown(\"Help us personalize your learning experience by completing your profile.\")\n\nif not is_authenticated():\n    st.error(\"Please log in to access this page.\")\n    if st.button(\"Go to Login\"):\n        st.switch_page(\"pages/1_Login.py\")\n    st.stop()\n\nuser_data = st.session_state.user_data\n\n# Profile form\nwith st.form(\"profile_form\"):\n    st.header(\"üìã Personal Information\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        name = st.text_input(\"Full Name\", value=user_data.get('name', ''))\n        experience_level = st.selectbox(\n            \"Experience Level\",\n            [\"Beginner\", \"Intermediate\", \"Advanced\", \"Expert\"],\n            index=[\"Beginner\", \"Intermediate\", \"Advanced\", \"Expert\"].index(\n                user_data.get('experience_level', 'Beginner')\n            )\n        )\n    \n    with col2:\n        email = st.text_input(\"Email\", value=user_data.get('email', ''), disabled=True)\n        age_group = st.selectbox(\n            \"Age Group\",\n            [\"Under 18\", \"18-25\", \"26-35\", \"36-50\", \"50+\"],\n            index=0 if not user_data.get('age_group') else \n            [\"Under 18\", \"18-25\", \"26-35\", \"36-50\", \"50+\"].index(user_data.get('age_group', 'Under 18'))\n        )\n    \n    st.header(\"üéØ Interests & Skills\")\n    \n    # Interests\n    st.subheader(\"Areas of Interest\")\n    interests_options = [\n        \"Programming\", \"Data Science\", \"Machine Learning\", \"Web Development\",\n        \"Mobile Development\", \"Game Development\", \"Cybersecurity\", \"DevOps\",\n        \"UI/UX Design\", \"Digital Marketing\", \"Business Analysis\", \"Project Management\",\n        \"Photography\", \"Writing\", \"Music\", \"Art & Design\", \"Languages\", \"Mathematics\",\n        \"Physics\", \"Chemistry\", \"Biology\", \"Psychology\", \"History\", \"Philosophy\"\n    ]\n    \n    current_interests = user_data.get('interests', '').split(',') if user_data.get('interests') else []\n    current_interests = [i.strip() for i in current_interests if i.strip()]\n    \n    selected_interests = st.multiselect(\n        \"Select your areas of interest (choose multiple)\",\n        interests_options,\n        default=[i for i in current_interests if i in interests_options]\n    )\n    \n    additional_interests = st.text_area(\n        \"Other interests (comma-separated)\",\n        value=', '.join([i for i in current_interests if i not in interests_options])\n    )\n    \n    # Current Skills\n    st.subheader(\"Current Skills\")\n    skills_categories = {\n        \"Programming Languages\": [\"Python\", \"JavaScript\", \"Java\", \"C++\", \"C#\", \"Go\", \"Rust\", \"Swift\", \"Kotlin\"],\n        \"Web Technologies\": [\"HTML/CSS\", \"React\", \"Vue.js\", \"Angular\", \"Node.js\", \"Django\", \"Flask\", \"Express\"],\n        \"Data & Analytics\": [\"SQL\", \"Pandas\", \"NumPy\", \"Matplotlib\", \"Tableau\", \"Excel\", \"R\", \"Power BI\"],\n        \"Tools & Platforms\": [\"Git\", \"Docker\", \"AWS\", \"Azure\", \"Google Cloud\", \"Linux\", \"Jenkins\", \"Kubernetes\"],\n        \"Design & Creative\": [\"Photoshop\", \"Illustrator\", \"Figma\", \"Sketch\", \"Canva\", \"Video Editing\"]\n    }\n    \n    current_skills = user_data.get('skills', '').split(',') if user_data.get('skills') else []\n    current_skills = [s.strip() for s in current_skills if s.strip()]\n    \n    all_skills = []\n    for category, skills in skills_categories.items():\n        st.write(f\"**{category}**\")\n        selected_skills = st.multiselect(\n            f\"Select {category.lower()}\",\n            skills,\n            default=[s for s in current_skills if s in skills],\n            key=f\"skills_{category.replace(' ', '_')}\"\n        )\n        all_skills.extend(selected_skills)\n    \n    additional_skills = st.text_area(\n        \"Other skills (comma-separated)\",\n        value=', '.join([s for s in current_skills if s not in [skill for skills in skills_categories.values() for skill in skills]])\n    )\n    \n    # Learning Goals\n    st.header(\"üéØ Learning Goals\")\n    \n    time_commitment = st.selectbox(\n        \"How much time can you dedicate to learning per week?\",\n        [\"1-3 hours\", \"4-7 hours\", \"8-15 hours\", \"16-25 hours\", \"25+ hours\"],\n        index=0 if not user_data.get('time_commitment') else \n        [\"1-3 hours\", \"4-7 hours\", \"8-15 hours\", \"16-25 hours\", \"25+ hours\"].index(user_data.get('time_commitment', '1-3 hours'))\n    )\n    \n    learning_style = st.selectbox(\n        \"Preferred Learning Style\",\n        [\"Visual (videos, diagrams)\", \"Reading (articles, documentation)\", \"Hands-on (projects, coding)\", \"Audio (podcasts, lectures)\", \"Mixed approach\"],\n        index=0 if not user_data.get('learning_style') else \n        [\"Visual (videos, diagrams)\", \"Reading (articles, documentation)\", \"Hands-on (projects, coding)\", \"Audio (podcasts, lectures)\", \"Mixed approach\"].index(user_data.get('learning_style', 'Mixed approach'))\n    )\n    \n    short_term_goals = st.text_area(\n        \"Short-term goals (3-6 months)\",\n        value=user_data.get('short_term_goals', ''),\n        placeholder=\"What do you want to achieve in the next 3-6 months?\"\n    )\n    \n    long_term_goals = st.text_area(\n        \"Long-term goals (1-2 years)\",\n        value=user_data.get('long_term_goals', ''),\n        placeholder=\"What are your long-term career or learning objectives?\"\n    )\n    \n    # Submit button\n    if st.form_submit_button(\"üíæ Save Profile\", type=\"primary\", use_container_width=True):\n        # Combine all interests\n        all_interests = selected_interests.copy()\n        if additional_interests.strip():\n            all_interests.extend([i.strip() for i in additional_interests.split(',') if i.strip()])\n        \n        # Combine all skills\n        if additional_skills.strip():\n            all_skills.extend([s.strip() for s in additional_skills.split(',') if s.strip()])\n        \n        # Update user data\n        updated_profile = {\n            'name': name,\n            'email': user_data['email'],\n            'password': user_data['password'],  # Keep existing password\n            'experience_level': experience_level,\n            'age_group': age_group,\n            'interests': ', '.join(all_interests),\n            'skills': ', '.join(all_skills),\n            'time_commitment': time_commitment,\n            'learning_style': learning_style,\n            'short_term_goals': short_term_goals,\n            'long_term_goals': long_term_goals,\n            'created_at': user_data.get('created_at', pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')),\n            'updated_at': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        if save_user_profile(updated_profile):\n            st.session_state.user_data = updated_profile\n            st.success(\"‚úÖ Profile saved successfully!\")\n            st.balloons()\n            \n            # Show next steps\n            st.markdown(\"### üéâ What's Next?\")\n            col1, col2, col3 = st.columns(3)\n            \n            with col1:\n                if st.button(\"üéØ Get Project Suggestions\", use_container_width=True):\n                    st.switch_page(\"pages/3_Project_Suggestions.py\")\n            \n            with col2:\n                if st.button(\"üó∫Ô∏è Create Learning Roadmap\", use_container_width=True):\n                    st.switch_page(\"pages/4_Learning_Roadmap.py\")\n            \n            with col3:\n                if st.button(\"üí¨ Chat with AI Mentor\", use_container_width=True):\n                    st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n        else:\n            st.error(\"Failed to save profile. Please try again.\")\n\n# Navigation\ncol1, col2 = st.columns(2)\nwith col1:\n    if st.button(\"‚Üê Back to Home\"):\n        st.switch_page(\"app.py\")\n\nwith col2:\n    if st.button(\"Continue to Project Suggestions ‚Üí\", type=\"primary\"):\n        st.switch_page(\"pages/3_Project_Suggestions.py\")\n","size_bytes":8004},"pages/3_Project_Suggestions.py":{"content":"import streamlit as st\nfrom utils.auth import init_session_state, require_auth, is_authenticated\nfrom utils.gemini_client import generate_project_suggestions\nfrom utils.data_manager import save_user_interaction\n\nst.set_page_config(page_title=\"Project Suggestions - AI Learning Mentor\", page_icon=\"üéØ\")\n\ninit_session_state()\nrequire_auth()\n\nst.title(\"üéØ AI-Powered Project Suggestions\")\nst.markdown(\"Get personalized project recommendations based on your profile and interests!\")\n\nif not is_authenticated():\n    st.error(\"Please log in to access this page.\")\n    st.stop()\n\nuser_data = st.session_state.user_data\n\n# Display user context\nwith st.expander(\"üìã Your Profile Summary\", expanded=False):\n    col1, col2 = st.columns(2)\n    with col1:\n        st.write(f\"**Experience Level:** {user_data.get('experience_level', 'Not set')}\")\n        st.write(f\"**Time Commitment:** {user_data.get('time_commitment', 'Not set')}\")\n        st.write(f\"**Learning Style:** {user_data.get('learning_style', 'Not set')}\")\n    \n    with col2:\n        interests = user_data.get('interests', 'Not set')\n        skills = user_data.get('skills', 'Not set')\n        st.write(f\"**Interests:** {interests[:100]}{'...' if len(interests) > 100 else ''}\")\n        st.write(f\"**Skills:** {skills[:100]}{'...' if len(skills) > 100 else ''}\")\n\n# Project generation form\nst.header(\"üé® Generate Custom Projects\")\n\nwith st.form(\"project_generation_form\"):\n    col1, col2 = st.columns(2)\n    \n    with col1:\n        focus_area = st.selectbox(\n            \"Focus Area\",\n            [\n                \"Based on my profile\",\n                \"Programming & Software Development\",\n                \"Data Science & Analytics\",\n                \"Web Development\",\n                \"Mobile App Development\",\n                \"Machine Learning & AI\",\n                \"Game Development\",\n                \"UI/UX Design\",\n                \"Digital Marketing\",\n                \"Business & Entrepreneurship\",\n                \"Creative Arts\",\n                \"Science & Research\"\n            ]\n        )\n        \n        difficulty_level = st.selectbox(\n            \"Difficulty Level\",\n            [\"Beginner\", \"Intermediate\", \"Advanced\", \"Mixed levels\"]\n        )\n    \n    with col2:\n        project_type = st.selectbox(\n            \"Project Type\",\n            [\n                \"Any type\",\n                \"Portfolio projects\",\n                \"Learning exercises\",\n                \"Real-world applications\",\n                \"Open source contributions\",\n                \"Freelance/Client work\",\n                \"Research projects\",\n                \"Creative challenges\"\n            ]\n        )\n        \n        timeline = st.selectbox(\n            \"Preferred Timeline\",\n            [\"1-2 weeks\", \"1 month\", \"2-3 months\", \"3-6 months\", \"Flexible\"]\n        )\n    \n    num_projects = st.slider(\"Number of projects to generate\", 1, 5, 3)\n    \n    additional_requirements = st.text_area(\n        \"Additional Requirements (optional)\",\n        placeholder=\"Any specific requirements, technologies, or constraints for your projects?\"\n    )\n    \n    generate_button = st.form_submit_button(\"üöÄ Generate Project Suggestions\", type=\"primary\", use_container_width=True)\n\n# Generate and display projects\nif generate_button or st.session_state.get('show_projects'):\n    if generate_button:\n        with st.spinner(\"ü§ñ AI is generating personalized projects for you...\"):\n            try:\n                projects = generate_project_suggestions(\n                    user_data=user_data,\n                    focus_area=focus_area,\n                    difficulty_level=difficulty_level,\n                    project_type=project_type,\n                    timeline=timeline,\n                    num_projects=num_projects,\n                    additional_requirements=additional_requirements\n                )\n                \n                if projects:\n                    st.session_state.generated_projects = projects\n                    st.session_state.show_projects = True\n                    \n                    # Save interaction\n                    interaction_data = {\n                        'user_email': user_data['email'],\n                        'interaction_type': 'project_suggestion',\n                        'details': f\"Generated {num_projects} projects for {focus_area}\",\n                        'timestamp': st.session_state.get('current_time', '')\n                    }\n                    save_user_interaction(interaction_data)\n                else:\n                    st.error(\"Failed to generate projects. Please try again.\")\n            \n            except Exception as e:\n                st.error(f\"An error occurred: {str(e)}\")\n                st.error(\"Please check your API key configuration and try again.\")\n    \n    # Display generated projects\n    if st.session_state.get('generated_projects'):\n        st.header(\"üéâ Your Personalized Projects\")\n        \n        projects = st.session_state.generated_projects\n        \n        for i, project in enumerate(projects, 1):\n            with st.container():\n                st.markdown(f\"### üöÄ Project {i}: {project.get('title', f'Project {i}')}\")\n                \n                col1, col2 = st.columns([2, 1])\n                \n                with col1:\n                    st.markdown(f\"**Description:** {project.get('description', 'No description available')}\")\n                    \n                    if project.get('objectives'):\n                        st.markdown(\"**Learning Objectives:**\")\n                        for objective in project.get('objectives', []):\n                            st.markdown(f\"‚Ä¢ {objective}\")\n                    \n                    if project.get('technologies'):\n                        st.markdown(f\"**Technologies:** {', '.join(project.get('technologies', []))}\")\n                    \n                    if project.get('features'):\n                        st.markdown(\"**Key Features:**\")\n                        for feature in project.get('features', []):\n                            st.markdown(f\"‚Ä¢ {feature}\")\n                \n                with col2:\n                    st.markdown(f\"**‚è±Ô∏è Timeline:** {project.get('timeline', 'Not specified')}\")\n                    st.markdown(f\"**üìä Difficulty:** {project.get('difficulty', 'Not specified')}\")\n                    \n                    if project.get('resources'):\n                        with st.expander(\"üìö Resources\"):\n                            for resource in project.get('resources', []):\n                                st.markdown(f\"‚Ä¢ {resource}\")\n                \n                # Action buttons\n                col1, col2, col3 = st.columns(3)\n                \n                with col1:\n                    if st.button(f\"üìã Save Project {i}\", key=f\"save_{i}\"):\n                        # Save to user's saved projects\n                        saved_projects = st.session_state.get('saved_projects', [])\n                        if project not in saved_projects:\n                            saved_projects.append(project)\n                            st.session_state.saved_projects = saved_projects\n                            st.success(f\"Project {i} saved!\")\n                \n                with col2:\n                    if st.button(f\"üó∫Ô∏è Create Roadmap\", key=f\"roadmap_{i}\"):\n                        st.session_state.selected_project_for_roadmap = project\n                        st.switch_page(\"pages/4_Learning_Roadmap.py\")\n                \n                with col3:\n                    if st.button(f\"üí¨ Discuss with AI\", key=f\"discuss_{i}\"):\n                        st.session_state.chat_context = f\"I want to discuss this project: {project.get('title', 'Untitled Project')}\"\n                        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n                \n                st.markdown(\"---\")\n        \n        # Regenerate button\n        if st.button(\"üîÑ Generate More Projects\", type=\"secondary\"):\n            del st.session_state['generated_projects']\n            st.session_state.show_projects = False\n            st.rerun()\n\n# Saved projects section\nif st.session_state.get('saved_projects'):\n    st.header(\"üíæ Your Saved Projects\")\n    \n    saved_projects = st.session_state.saved_projects\n    \n    for i, project in enumerate(saved_projects):\n        with st.expander(f\"üìã {project.get('title', f'Saved Project {i+1}')}\"):\n            st.markdown(f\"**Description:** {project.get('description', 'No description')}\")\n            \n            col1, col2 = st.columns(2)\n            with col1:\n                if st.button(f\"üó∫Ô∏è Create Roadmap\", key=f\"saved_roadmap_{i}\"):\n                    st.session_state.selected_project_for_roadmap = project\n                    st.switch_page(\"pages/4_Learning_Roadmap.py\")\n            \n            with col2:\n                if st.button(f\"üóëÔ∏è Remove\", key=f\"remove_{i}\"):\n                    st.session_state.saved_projects.pop(i)\n                    st.rerun()\n\n# Navigation\nst.markdown(\"---\")\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    if st.button(\"‚Üê Back to Profile\"):\n        st.switch_page(\"pages/2_Profile_Setup.py\")\n\nwith col2:\n    if st.button(\"üó∫Ô∏è Learning Roadmap\"):\n        st.switch_page(\"pages/4_Learning_Roadmap.py\")\n\nwith col3:\n    if st.button(\"üí¨ Chat with Mentor\"):\n        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n","size_bytes":9388},"pages/4_Learning_Roadmap.py":{"content":"import streamlit as st\nfrom utils.auth import init_session_state, require_auth, is_authenticated\nfrom utils.gemini_client import generate_learning_roadmap\nfrom utils.data_manager import save_roadmap, load_user_roadmaps\n\nst.set_page_config(page_title=\"Learning Roadmap - AI Learning Mentor\", page_icon=\"üó∫Ô∏è\")\n\ninit_session_state()\nrequire_auth()\n\nst.title(\"üó∫Ô∏è Personalized Learning Roadmap\")\nst.markdown(\"Create a structured learning path tailored to your goals and timeline!\")\n\nif not is_authenticated():\n    st.error(\"Please log in to access this page.\")\n    st.stop()\n\nuser_data = st.session_state.user_data\n\n# Display existing roadmaps\nexisting_roadmaps = load_user_roadmaps(user_data['email'])\nif not existing_roadmaps.empty:\n    st.header(\"üìö Your Learning Roadmaps\")\n    \n    for _, roadmap in existing_roadmaps.iterrows():\n        with st.expander(f\"üéØ {roadmap['title']} ({roadmap['created_at'][:10]})\"):\n            st.markdown(f\"**Goal:** {roadmap['goal']}\")\n            st.markdown(f\"**Timeline:** {roadmap['timeline']}\")\n            st.markdown(f\"**Difficulty:** {roadmap['difficulty_level']}\")\n            \n            col1, col2 = st.columns(2)\n            with col1:\n                if st.button(f\"üìñ View Full Roadmap\", key=f\"view_{roadmap['id']}\"):\n                    st.session_state.viewing_roadmap = roadmap.to_dict()\n                    st.rerun()\n            \n            with col2:\n                if st.button(f\"üí¨ Discuss Roadmap\", key=f\"discuss_{roadmap['id']}\"):\n                    st.session_state.chat_context = f\"I want to discuss my learning roadmap: {roadmap['title']}\"\n                    st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n\n# Create new roadmap section\nst.header(\"üé® Create New Learning Roadmap\")\n\n# Check if coming from project suggestions\nif st.session_state.get('selected_project_for_roadmap'):\n    project = st.session_state.selected_project_for_roadmap\n    st.info(f\"Creating roadmap for project: **{project.get('title', 'Selected Project')}**\")\n\nwith st.form(\"roadmap_form\"):\n    col1, col2 = st.columns(2)\n    \n    with col1:\n        if st.session_state.get('selected_project_for_roadmap'):\n            goal = st.text_area(\n                \"Learning Goal\",\n                value=f\"Complete the project: {st.session_state.selected_project_for_roadmap.get('title', '')} - {st.session_state.selected_project_for_roadmap.get('description', '')}\",\n                help=\"What specific skill or project do you want to learn?\"\n            )\n        else:\n            goal = st.text_area(\n                \"Learning Goal\",\n                value=user_data.get('short_term_goals', ''),\n                placeholder=\"What specific skill, technology, or project do you want to learn?\",\n                help=\"Be specific about what you want to achieve\"\n            )\n        \n        timeline = st.selectbox(\n            \"Timeline\",\n            [\"2 weeks\", \"1 month\", \"2 months\", \"3 months\", \"6 months\", \"1 year\", \"Custom\"],\n            index=2\n        )\n        \n        if timeline == \"Custom\":\n            custom_timeline = st.text_input(\"Specify custom timeline\", placeholder=\"e.g., 10 weeks\")\n            timeline = custom_timeline if custom_timeline else \"3 months\"\n    \n    with col2:\n        difficulty_level = st.selectbox(\n            \"Difficulty Level\",\n            [\"Beginner\", \"Intermediate\", \"Advanced\"],\n            index=[\"Beginner\", \"Intermediate\", \"Advanced\"].index(user_data.get('experience_level', 'Beginner'))\n        )\n        \n        focus_areas = st.multiselect(\n            \"Focus Areas\",\n            [\n                \"Programming Fundamentals\",\n                \"Web Development\",\n                \"Data Science\",\n                \"Machine Learning\",\n                \"Mobile Development\",\n                \"DevOps\",\n                \"Database Design\",\n                \"System Design\",\n                \"UI/UX Design\",\n                \"Project Management\",\n                \"Soft Skills\",\n                \"Industry Knowledge\"\n            ],\n            default=[\"Programming Fundamentals\"] if user_data.get('experience_level') == 'Beginner' else []\n        )\n        \n        learning_style = st.selectbox(\n            \"Preferred Learning Style\",\n            [\"Hands-on projects\", \"Theory then practice\", \"Mixed approach\", \"Video-based\", \"Reading-intensive\"],\n            index=0 if user_data.get('learning_style', '').startswith('Hands-on') else 2\n        )\n    \n    time_per_week = st.selectbox(\n        \"Time commitment per week\",\n        [\"1-3 hours\", \"4-7 hours\", \"8-15 hours\", \"16+ hours\"],\n        index=0 if not user_data.get('time_commitment') else \n        [\"1-3 hours\", \"4-7 hours\", \"8-15 hours\", \"16+ hours\"].index(\n            user_data.get('time_commitment', '1-3 hours').replace('25+ hours', '16+ hours')\n        )\n    )\n    \n    prior_knowledge = st.text_area(\n        \"Current Knowledge & Skills\",\n        value=user_data.get('skills', ''),\n        placeholder=\"What do you already know that's relevant to this goal?\"\n    )\n    \n    preferences = st.text_area(\n        \"Additional Preferences (optional)\",\n        placeholder=\"Any specific technologies, tools, or approaches you want to include/avoid?\"\n    )\n    \n    generate_roadmap_btn = st.form_submit_button(\"üöÄ Generate Learning Roadmap\", type=\"primary\", use_container_width=True)\n\n# Generate roadmap\nif generate_roadmap_btn:\n    with st.spinner(\"ü§ñ AI is creating your personalized learning roadmap...\"):\n        try:\n            roadmap_data = {\n                'user_data': user_data,\n                'goal': goal,\n                'timeline': timeline,\n                'difficulty_level': difficulty_level,\n                'focus_areas': focus_areas,\n                'learning_style': learning_style,\n                'time_per_week': time_per_week,\n                'prior_knowledge': prior_knowledge,\n                'preferences': preferences,\n                'project_context': st.session_state.get('selected_project_for_roadmap')\n            }\n            \n            roadmap = generate_learning_roadmap(roadmap_data)\n            \n            if roadmap:\n                st.session_state.current_roadmap = roadmap\n                \n                # Save roadmap to CSV\n                roadmap_record = {\n                    'user_email': user_data['email'],\n                    'title': roadmap.get('title', goal[:50]) if roadmap and isinstance(roadmap, dict) else goal[:50],\n                    'goal': goal,\n                    'timeline': timeline,\n                    'difficulty_level': difficulty_level,\n                    'content': str(roadmap) if roadmap else '',\n                    'created_at': st.session_state.get('current_time', ''),\n                    'progress': 0\n                }\n                \n                roadmap_id = save_roadmap(roadmap_record)\n                if roadmap_id:\n                    st.session_state.current_roadmap['id'] = roadmap_id\n                \n                st.success(\"‚úÖ Roadmap generated successfully!\")\n                \n                # Clear project context after use\n                if 'selected_project_for_roadmap' in st.session_state:\n                    del st.session_state.selected_project_for_roadmap\n                \n                st.rerun()\n            else:\n                st.error(\"Failed to generate roadmap. Please try again.\")\n        \n        except Exception as e:\n            st.error(f\"An error occurred: {str(e)}\")\n\n# Display current roadmap\nif st.session_state.get('current_roadmap') or st.session_state.get('viewing_roadmap'):\n    roadmap = st.session_state.get('current_roadmap') or st.session_state.get('viewing_roadmap')\n    \n    st.header(\"üìñ Your Learning Roadmap\")\n    \n    # Roadmap header\n    if roadmap and roadmap.get('title'):\n        st.markdown(f\"### üéØ {roadmap['title']}\")\n    \n    if roadmap and roadmap.get('overview'):\n        st.markdown(f\"**Overview:** {roadmap['overview']}\")\n    \n    # Display phases/milestones\n    if roadmap and roadmap.get('phases'):\n        st.subheader(\"üìã Learning Phases\")\n        \n        for i, phase in enumerate(roadmap['phases'], 1):\n            with st.expander(f\"Phase {i}: {phase.get('title', f'Phase {i}')} ({phase.get('duration', 'TBD')})\", expanded=i==1):\n                st.markdown(f\"**Objective:** {phase.get('objective', 'Not specified')}\")\n                \n                if phase.get('topics'):\n                    st.markdown(\"**Topics to Learn:**\")\n                    for topic in phase['topics']:\n                        st.markdown(f\"‚Ä¢ {topic}\")\n                \n                if phase.get('activities'):\n                    st.markdown(\"**Activities:**\")\n                    for activity in phase['activities']:\n                        st.markdown(f\"‚Ä¢ {activity}\")\n                \n                if phase.get('resources'):\n                    st.markdown(\"**Recommended Resources:**\")\n                    for resource in phase['resources']:\n                        st.markdown(f\"‚Ä¢ {resource}\")\n                \n                if phase.get('milestones'):\n                    st.markdown(\"**Milestones:**\")\n                    for milestone in phase['milestones']:\n                        completed = st.checkbox(f\"{milestone}\", key=f\"milestone_{i}_{milestone[:20]}\")\n                        if completed:\n                            st.success(\"‚úÖ Completed!\")\n                \n                # Phase action buttons\n                col1, col2 = st.columns(2)\n                with col1:\n                    if st.button(f\"üí¨ Get Help with Phase {i}\", key=f\"help_{i}\"):\n                        st.session_state.chat_context = f\"I need help with Phase {i} of my learning roadmap: {phase.get('title', f'Phase {i}')}\"\n                        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n                \n                with col2:\n                    if st.button(f\"‚úÖ Mark Phase {i} Complete\", key=f\"complete_{i}\"):\n                        st.success(f\"Phase {i} marked as complete!\")\n                        st.balloons()\n    \n    # Additional resources\n    if roadmap and roadmap.get('additional_resources'):\n        st.subheader(\"üìö Additional Resources\")\n        for resource in roadmap['additional_resources']:\n            st.markdown(f\"‚Ä¢ {resource}\")\n    \n    # Tips and recommendations\n    if roadmap and roadmap.get('tips'):\n        st.subheader(\"üí° Study Tips\")\n        for tip in roadmap['tips']:\n            st.markdown(f\"‚Ä¢ {tip}\")\n    \n    # Action buttons\n    st.markdown(\"---\")\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        if st.button(\"üìä Track Progress\"):\n            st.switch_page(\"pages/6_Progress_Tracking.py\")\n    \n    with col2:\n        if st.button(\"üí¨ Discuss with Mentor\"):\n            title = roadmap.get('title', 'My Roadmap') if roadmap else 'My Roadmap'\n            st.session_state.chat_context = f\"I want to discuss my learning roadmap: {title}\"\n            st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n    \n    with col3:\n        if st.button(\"üéØ New Project Ideas\"):\n            st.switch_page(\"pages/3_Project_Suggestions.py\")\n    \n    # Clear viewing roadmap\n    if st.button(\"üîÑ Create New Roadmap\"):\n        if 'viewing_roadmap' in st.session_state:\n            del st.session_state.viewing_roadmap\n        if 'current_roadmap' in st.session_state:\n            del st.session_state.current_roadmap\n        st.rerun()\n\n# Navigation\nst.markdown(\"---\")\ncol1, col2 = st.columns(2)\n\nwith col1:\n    if st.button(\"‚Üê Back to Projects\"):\n        st.switch_page(\"pages/3_Project_Suggestions.py\")\n\nwith col2:\n    if st.button(\"üí¨ Chat with Mentor\"):\n        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n","size_bytes":11699},"pages/5_Chatbot_Mentor.py":{"content":"import streamlit as st\nfrom utils.auth import init_session_state, require_auth, is_authenticated\nfrom utils.gemini_client import chat_with_mentor\nfrom utils.data_manager import save_chat_message, load_chat_history\n\nst.set_page_config(page_title=\"AI Mentor Chat - AI Learning Mentor\", page_icon=\"üí¨\")\n\ninit_session_state()\nrequire_auth()\n\nst.title(\"üí¨ AI Learning Mentor Chat\")\nst.markdown(\"Get instant help, guidance, and answers to your learning questions!\")\n\nif not is_authenticated():\n    st.error(\"Please log in to access this page.\")\n    st.stop()\n\nuser_data = st.session_state.user_data\n\n# Initialize chat session\nif 'chat_messages' not in st.session_state:\n    st.session_state.chat_messages = []\n\n# Load chat history\nchat_history = load_chat_history(user_data['email'])\nif not chat_history.empty and not st.session_state.chat_messages:\n    # Load recent messages\n    recent_messages = chat_history.tail(20)  # Last 20 messages\n    for _, message in recent_messages.iterrows():\n        st.session_state.chat_messages.append({\n            \"role\": message['role'],\n            \"content\": message['content'],\n            \"timestamp\": message['timestamp']\n        })\n\n# Quick start options\nif not st.session_state.chat_messages:\n    st.header(\"üöÄ Quick Start\")\n    st.markdown(\"Choose a topic to get started, or type your own question below:\")\n    \n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        if st.button(\"üéØ Project Help\", use_container_width=True):\n            starter_message = \"I need help with a project. Can you guide me through the planning and development process?\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n        \n        if st.button(\"üêõ Debugging Help\", use_container_width=True):\n            starter_message = \"I'm having trouble debugging my code. Can you help me understand common debugging techniques?\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n    \n    with col2:\n        if st.button(\"üó∫Ô∏è Learning Path\", use_container_width=True):\n            starter_message = \"I want to create a learning plan. Can you help me structure my studies effectively?\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n        \n        if st.button(\"üíº Career Advice\", use_container_width=True):\n            starter_message = \"I'd like career guidance in tech. Can you help me understand different career paths and requirements?\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n    \n    with col3:\n        if st.button(\"üõ†Ô∏è Technology Choice\", use_container_width=True):\n            starter_message = \"I'm confused about which technology to learn next. Can you help me choose based on my goals?\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n        \n        if st.button(\"üìö Study Techniques\", use_container_width=True):\n            starter_message = \"What are the best techniques for learning programming effectively? I want to improve my study habits.\"\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter_message, \"timestamp\": \"\"})\n            st.rerun()\n\n# Handle context from other pages\nif st.session_state.get('chat_context') and not any(msg['content'] == st.session_state.chat_context for msg in st.session_state.chat_messages):\n    context_message = st.session_state.chat_context\n    st.session_state.chat_messages.append({\"role\": \"user\", \"content\": context_message, \"timestamp\": \"\"})\n    del st.session_state.chat_context\n    st.rerun()\n\n# Chat interface\nst.header(\"üí≠ Conversation\")\n\n# Display chat messages\nchat_container = st.container()\nwith chat_container:\n    for i, message in enumerate(st.session_state.chat_messages):\n        if message[\"role\"] == \"user\":\n            with st.chat_message(\"user\"):\n                st.write(message[\"content\"])\n                if message.get(\"timestamp\"):\n                    st.caption(f\"Sent: {message['timestamp']}\")\n        else:\n            with st.chat_message(\"assistant\"):\n                st.write(message[\"content\"])\n                if message.get(\"timestamp\"):\n                    st.caption(f\"AI Mentor: {message['timestamp']}\")\n                \n                # Action buttons for AI responses\n                col1, col2, col3 = st.columns([1, 1, 2])\n                with col1:\n                    if st.button(\"üëç Helpful\", key=f\"helpful_{i}\"):\n                        st.success(\"Thanks for the feedback!\")\n                \n                with col2:\n                    if st.button(\"üîÑ Clarify\", key=f\"clarify_{i}\"):\n                        clarification = f\"Can you clarify or expand on this response: '{message['content'][:100]}...'\"\n                        st.session_state.chat_messages.append({\"role\": \"user\", \"content\": clarification, \"timestamp\": \"\"})\n                        st.rerun()\n\n# User input\nuser_input = st.chat_input(\"Ask me anything about learning, projects, or technology...\")\n\nif user_input:\n    # Add user message to chat\n    st.session_state.chat_messages.append({\n        \"role\": \"user\", \n        \"content\": user_input, \n        \"timestamp\": st.session_state.get('current_time', '')\n    })\n    \n    # Save user message\n    save_chat_message({\n        'user_email': user_data['email'],\n        'role': 'user',\n        'content': user_input,\n        'timestamp': st.session_state.get('current_time', '')\n    })\n    \n    # Get AI response\n    with st.spinner(\"ü§ñ AI Mentor is thinking...\"):\n        try:\n            # Prepare context for AI\n            context = {\n                'user_profile': user_data,\n                'chat_history': st.session_state.chat_messages[-5:],  # Last 5 messages for context\n                'current_message': user_input\n            }\n            \n            ai_response = chat_with_mentor(context)\n            \n            if ai_response:\n                # Add AI response to chat\n                st.session_state.chat_messages.append({\n                    \"role\": \"assistant\", \n                    \"content\": ai_response, \n                    \"timestamp\": st.session_state.get('current_time', '')\n                })\n                \n                # Save AI message\n                save_chat_message({\n                    'user_email': user_data['email'],\n                    'role': 'assistant',\n                    'content': ai_response,\n                    'timestamp': st.session_state.get('current_time', '')\n                })\n                \n                st.rerun()\n            else:\n                st.error(\"Sorry, I couldn't process your message right now. Please try again.\")\n        \n        except Exception as e:\n            st.error(f\"An error occurred: {str(e)}\")\n\n# Sidebar with chat management\nwith st.sidebar:\n    st.header(\"üí¨ Chat Management\")\n    \n    st.markdown(f\"**Messages in conversation:** {len(st.session_state.chat_messages)}\")\n    \n    if st.button(\"üóëÔ∏è Clear Chat History\"):\n        st.session_state.chat_messages = []\n        st.success(\"Chat history cleared!\")\n        st.rerun()\n    \n    if st.button(\"üíæ Export Chat\"):\n        chat_text = \"\"\n        for msg in st.session_state.chat_messages:\n            role = \"You\" if msg[\"role\"] == \"user\" else \"AI Mentor\"\n            chat_text += f\"{role}: {msg['content']}\\n\\n\"\n        \n        st.download_button(\n            label=\"üì• Download Chat\",\n            data=chat_text,\n            file_name=f\"chat_history_{user_data['email']}_{st.session_state.get('current_time', 'export')}.txt\",\n            mime=\"text/plain\"\n        )\n    \n    st.markdown(\"---\")\n    \n    # Quick actions\n    st.subheader(\"üéØ Quick Actions\")\n    \n    if st.button(\"üìä View Progress\", use_container_width=True):\n        st.switch_page(\"pages/6_Progress_Tracking.py\")\n    \n    if st.button(\"üéØ Get Projects\", use_container_width=True):\n        st.switch_page(\"pages/3_Project_Suggestions.py\")\n    \n    if st.button(\"üó∫Ô∏è View Roadmap\", use_container_width=True):\n        st.switch_page(\"pages/4_Learning_Roadmap.py\")\n    \n    if st.button(\"üë§ Update Profile\", use_container_width=True):\n        st.switch_page(\"pages/2_Profile_Setup.py\")\n    \n    st.markdown(\"---\")\n    \n    # Conversation starters\n    st.subheader(\"üí° Conversation Starters\")\n    \n    starters = [\n        \"What should I learn next?\",\n        \"Help me debug this error\",\n        \"Explain this concept to me\",\n        \"Review my project idea\",\n        \"Career advice in tech\",\n        \"Best learning resources\",\n        \"How to stay motivated?\",\n        \"Technical interview prep\"\n    ]\n    \n    for starter in starters:\n        if st.button(f\"üí¨ {starter}\", key=f\"starter_{starter[:10]}\"):\n            st.session_state.chat_messages.append({\"role\": \"user\", \"content\": starter, \"timestamp\": \"\"})\n            st.rerun()\n\n# Navigation\nst.markdown(\"---\")\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    if st.button(\"‚Üê Back to Roadmap\"):\n        st.switch_page(\"pages/4_Learning_Roadmap.py\")\n\nwith col2:\n    if st.button(\"üè† Home\"):\n        st.switch_page(\"app.py\")\n\nwith col3:\n    if st.button(\"üìä Progress Tracking\"):\n        st.switch_page(\"pages/6_Progress_Tracking.py\")\n","size_bytes":9496},"pages/6_Progress_Tracking.py":{"content":"import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nfrom utils.auth import init_session_state, require_auth, is_authenticated\nfrom utils.data_manager import (\n    load_user_roadmaps, load_chat_history, load_user_interactions, \n    save_progress_entry, load_progress_entries\n)\n\nst.set_page_config(page_title=\"Progress Tracking - AI Learning Mentor\", page_icon=\"üìä\")\n\ninit_session_state()\nrequire_auth()\n\nst.title(\"üìä Progress Tracking Dashboard\")\nst.markdown(\"Monitor your learning journey and celebrate your achievements!\")\n\nif not is_authenticated():\n    st.error(\"Please log in to access this page.\")\n    st.stop()\n\nuser_data = st.session_state.user_data\nuser_email = user_data['email']\n\n# Load user data\nroadmaps = load_user_roadmaps(user_email)\nchat_history = load_chat_history(user_email)\ninteractions = load_user_interactions(user_email)\nprogress_entries = load_progress_entries(user_email)\n\n# Overview cards\nst.header(\"üìà Learning Overview\")\n\ncol1, col2, col3, col4 = st.columns(4)\n\nwith col1:\n    st.metric(\n        label=\"üó∫Ô∏è Learning Roadmaps\",\n        value=len(roadmaps) if not roadmaps.empty else 0,\n        help=\"Total number of learning roadmaps created\"\n    )\n\nwith col2:\n    st.metric(\n        label=\"üí¨ Mentor Conversations\",\n        value=len(chat_history[chat_history['role'] == 'user']) if not chat_history.empty else 0,\n        help=\"Number of questions asked to AI mentor\"\n    )\n\nwith col3:\n    st.metric(\n        label=\"üéØ Projects Explored\",\n        value=len(interactions[interactions['interaction_type'] == 'project_suggestion']) if not interactions.empty else 0,\n        help=\"Number of times you've used project suggestions\"\n    )\n\nwith col4:\n    total_progress = len(progress_entries) if not progress_entries.empty else 0\n    st.metric(\n        label=\"‚úÖ Progress Entries\",\n        value=total_progress,\n        help=\"Number of progress updates logged\"\n    )\n\n# Activity timeline\nif not interactions.empty or not chat_history.empty:\n    st.header(\"üìÖ Activity Timeline\")\n    \n    # Combine interactions and chat for timeline\n    timeline_data = []\n    \n    if not interactions.empty:\n        for _, interaction in interactions.iterrows():\n            try:\n                timestamp_date = pd.to_datetime(interaction['timestamp']).date() if pd.notna(interaction['timestamp']) else datetime.now().date()\n            except:\n                timestamp_date = datetime.now().date()\n            timeline_data.append({\n                'date': timestamp_date,\n                'activity': str(interaction['interaction_type']).replace('_', ' ').title(),\n                'details': interaction['details'],\n                'type': 'interaction'\n            })\n    \n    if not chat_history.empty:\n        chat_days = chat_history.groupby(pd.to_datetime(chat_history['timestamp']).dt.date).size()\n        for date, count in chat_days.items():\n            timeline_data.append({\n                'date': date,\n                'activity': 'Mentor Chat',\n                'details': f'{count} messages exchanged',\n                'type': 'chat'\n            })\n    \n    if timeline_data:\n        timeline_df = pd.DataFrame(timeline_data)\n        timeline_df = timeline_df.sort_values('date', ascending=False)\n        \n        # Display recent activities\n        st.subheader(\"üïí Recent Activities\")\n        for _, activity in timeline_df.head(10).iterrows():\n            with st.container():\n                col1, col2 = st.columns([3, 1])\n                with col1:\n                    st.markdown(f\"**{activity['activity']}**\")\n                    st.markdown(f\"{activity['details']}\")\n                with col2:\n                    st.markdown(f\"*{activity['date']}*\")\n                st.markdown(\"---\")\n\n# Progress logging\nst.header(\"üìù Log Your Progress\")\n\nwith st.form(\"progress_form\"):\n    col1, col2 = st.columns(2)\n    \n    with col1:\n        progress_type = st.selectbox(\n            \"What did you work on?\",\n            [\n                \"Completed a learning module\",\n                \"Finished a project milestone\",\n                \"Learned a new concept\",\n                \"Solved a coding problem\",\n                \"Read documentation/tutorial\",\n                \"Watched educational content\",\n                \"Practiced coding exercises\",\n                \"Attended a course/workshop\",\n                \"Other\"\n            ]\n        )\n        \n        if progress_type == \"Other\":\n            custom_type = st.text_input(\"Specify activity type\")\n            progress_type = custom_type if custom_type else \"Other activity\"\n    \n    with col2:\n        time_spent = st.selectbox(\n            \"Time spent\",\n            [\"15 minutes\", \"30 minutes\", \"1 hour\", \"2 hours\", \"3 hours\", \"4+ hours\"]\n        )\n        \n        difficulty_rating = st.selectbox(\n            \"How challenging was it?\",\n            [\"üòä Easy\", \"ü§î Medium\", \"üòÖ Hard\", \"ü§Ø Very Hard\"]\n        )\n    \n    progress_description = st.text_area(\n        \"Describe your progress\",\n        placeholder=\"What did you learn or accomplish? Any challenges or breakthroughs?\"\n    )\n    \n    skills_gained = st.text_input(\n        \"Skills/Technologies learned (comma-separated)\",\n        placeholder=\"e.g., Python, React, SQL, Problem-solving\"\n    )\n    \n    next_steps = st.text_input(\n        \"What's next?\",\n        placeholder=\"What do you plan to work on next?\"\n    )\n    \n    if st.form_submit_button(\"‚úÖ Log Progress\", type=\"primary\", use_container_width=True):\n        if progress_description.strip():\n            progress_entry = {\n                'user_email': user_email,\n                'progress_type': progress_type,\n                'description': progress_description,\n                'time_spent': time_spent,\n                'difficulty_rating': difficulty_rating,\n                'skills_gained': skills_gained,\n                'next_steps': next_steps,\n                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n            \n            if save_progress_entry(progress_entry):\n                st.success(\"üéâ Progress logged successfully!\")\n                st.balloons()\n                st.rerun()\n            else:\n                st.error(\"Failed to save progress. Please try again.\")\n        else:\n            st.error(\"Please describe your progress.\")\n\n# Progress history\nif not progress_entries.empty:\n    st.header(\"üìö Progress History\")\n    \n    # Filter options\n    col1, col2 = st.columns(2)\n    with col1:\n        date_filter = st.date_input(\n            \"Filter by date (from)\",\n            value=datetime.now().date() - timedelta(days=30),\n            max_value=datetime.now().date()\n        )\n    \n    with col2:\n        type_filter = st.selectbox(\n            \"Filter by activity type\",\n            [\"All\"] + list(progress_entries['progress_type'].unique())\n        )\n    \n    # Apply filters\n    filtered_entries = progress_entries.copy()\n    \n    # Date filter\n    filtered_entries['date'] = pd.to_datetime(filtered_entries['timestamp']).dt.date\n    filtered_entries = filtered_entries[filtered_entries['date'] >= date_filter]\n    \n    # Type filter\n    if type_filter != \"All\":\n        filtered_entries = filtered_entries[filtered_entries['progress_type'] == type_filter]\n    \n    if len(filtered_entries) > 0:\n        # Progress visualization\n        st.subheader(\"üìà Learning Patterns\")\n        \n        # Progress over time\n        daily_progress = filtered_entries.groupby('date').size().reset_index(name='entries')\n        \n        if len(daily_progress) > 1:\n            fig = px.line(\n                daily_progress, \n                x='date', \n                y='entries',\n                title='Daily Learning Activities',\n                labels={'entries': 'Number of Activities', 'date': 'Date'}\n            )\n            st.plotly_chart(fig, use_container_width=True)\n        \n        # Activity type distribution\n        type_counts = filtered_entries['progress_type'].value_counts()\n        if len(type_counts) > 1:\n            fig = px.pie(\n                values=type_counts.values,\n                names=type_counts.index,\n                title='Activity Type Distribution'\n            )\n            st.plotly_chart(fig, use_container_width=True)\n        \n        # Time investment analysis\n        time_mapping = {\n            \"15 minutes\": 0.25, \"30 minutes\": 0.5, \"1 hour\": 1,\n            \"2 hours\": 2, \"3 hours\": 3, \"4+ hours\": 4\n        }\n        \n        filtered_entries['time_hours'] = filtered_entries['time_spent'].map(time_mapping).fillna(1.0)\n        total_time = filtered_entries['time_hours'].sum()\n        avg_time = filtered_entries['time_hours'].mean()\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            st.metric(\"‚è∞ Total Learning Time\", f\"{total_time:.1f} hours\")\n        with col2:\n            st.metric(\"üìä Average Session\", f\"{avg_time:.1f} hours\")\n        \n        # Recent progress entries\n        st.subheader(\"üìñ Recent Progress Entries\")\n        \n        for _, entry in filtered_entries.head(10).iterrows():\n            with st.expander(f\"üéØ {entry['progress_type']} - {entry['timestamp'][:10]}\"):\n                st.markdown(f\"**Description:** {entry['description']}\")\n                \n                col1, col2 = st.columns(2)\n                with col1:\n                    st.markdown(f\"**Time Spent:** {entry['time_spent']}\")\n                    st.markdown(f\"**Difficulty:** {entry['difficulty_rating']}\")\n                \n                with col2:\n                    if entry.get('skills_gained'):\n                        st.markdown(f\"**Skills Gained:** {entry['skills_gained']}\")\n                    if entry.get('next_steps'):\n                        st.markdown(f\"**Next Steps:** {entry['next_steps']}\")\n    else:\n        st.info(\"No progress entries found for the selected filters.\")\n\nelse:\n    st.info(\"üìù No progress logged yet. Start by logging your first learning activity above!\")\n\n# Learning insights\nst.header(\"üí° Learning Insights\")\n\ninsights = []\n\nif not progress_entries.empty:\n    recent_entries = progress_entries.tail(10)\n    \n    # Most common activity\n    most_common = progress_entries['progress_type'].mode().iloc[0] if not progress_entries.empty else None\n    if most_common:\n        insights.append(f\"üéØ Your most common learning activity is: **{most_common}**\")\n    \n    # Learning streak\n    if len(progress_entries) > 0:\n        progress_entries['date'] = pd.to_datetime(progress_entries['timestamp']).dt.date\n        unique_dates = sorted(progress_entries['date'].unique(), reverse=True)\n        \n        streak = 0\n        current_date = datetime.now().date()\n        \n        for date in unique_dates:\n            if (current_date - date).days <= streak:\n                streak += 1\n                current_date = date\n            else:\n                break\n        \n        if streak > 1:\n            insights.append(f\"üî• You have a {streak}-day learning streak! Keep it up!\")\n    \n    # Skills analysis\n    all_skills = []\n    for skills_str in progress_entries['skills_gained'].dropna():\n        all_skills.extend([skill.strip() for skill in skills_str.split(',') if skill.strip()])\n    \n    if all_skills:\n        skill_counts = pd.Series(all_skills).value_counts()\n        top_skill = skill_counts.index[0]\n        insights.append(f\"üöÄ You've been focusing a lot on: **{top_skill}**\")\n\nif not roadmaps.empty:\n    insights.append(f\"üó∫Ô∏è You have **{len(roadmaps)}** learning roadmap(s) to guide your journey\")\n\nif not chat_history.empty:\n    chat_count = len(chat_history[chat_history['role'] == 'user'])\n    insights.append(f\"ü§ñ You've asked **{chat_count}** questions to your AI mentor\")\n\nif insights:\n    for insight in insights:\n        st.success(insight)\nelse:\n    st.info(\"Keep using the app to generate personalized learning insights!\")\n\n# Action buttons\nst.header(\"üéØ Quick Actions\")\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    if st.button(\"üí¨ Ask AI Mentor\", use_container_width=True):\n        st.session_state.chat_context = \"Can you help me analyze my learning progress and suggest next steps?\"\n        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n\nwith col2:\n    if st.button(\"üéØ Get New Projects\", use_container_width=True):\n        st.switch_page(\"pages/3_Project_Suggestions.py\")\n\nwith col3:\n    if st.button(\"üó∫Ô∏è Update Roadmap\", use_container_width=True):\n        st.switch_page(\"pages/4_Learning_Roadmap.py\")\n\n# Navigation\nst.markdown(\"---\")\ncol1, col2 = st.columns(2)\n\nwith col1:\n    if st.button(\"‚Üê Back to Chat\"):\n        st.switch_page(\"pages/5_Chatbot_Mentor.py\")\n\nwith col2:\n    if st.button(\"üè† Home\"):\n        st.switch_page(\"app.py\")\n","size_bytes":12788},"utils/auth.py":{"content":"import streamlit as st\nimport pandas as pd\nimport hashlib\nfrom datetime import datetime\nfrom utils.data_manager import load_users, save_user\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hash a password using SHA256.\"\"\"\n    return hashlib.sha256(password.encode()).hexdigest()\n\ndef init_session_state():\n    \"\"\"Initialize session state variables.\"\"\"\n    if 'authenticated' not in st.session_state:\n        st.session_state.authenticated = False\n    \n    if 'user_data' not in st.session_state:\n        st.session_state.user_data = {}\n    \n    if 'current_time' not in st.session_state:\n        st.session_state.current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\ndef is_authenticated() -> bool:\n    \"\"\"Check if user is authenticated.\"\"\"\n    return st.session_state.get('authenticated', False)\n\ndef require_auth():\n    \"\"\"Redirect to login if not authenticated.\"\"\"\n    if not is_authenticated():\n        st.warning(\"Please log in to access this page.\")\n        if st.button(\"Go to Login\", type=\"primary\"):\n            st.switch_page(\"pages/1_Login.py\")\n        st.stop()\n\ndef authenticate_user(email: str, password: str) -> dict | None:\n    \"\"\"Authenticate user with email and password.\"\"\"\n    try:\n        users_df = load_users()\n        \n        if users_df.empty:\n            return None\n        \n        # Find user by email\n        user_row = users_df[users_df['email'] == email]\n        \n        if user_row.empty:\n            return None\n        \n        user_data = user_row.iloc[0].to_dict()\n        stored_password = user_data.get('password', '')\n        \n        # Check password (support both hashed and plain text for backward compatibility)\n        if stored_password == password or stored_password == hash_password(password):\n            # Remove password from returned data for security\n            user_data.pop('password', None)\n            return user_data\n        \n        return None\n    \n    except Exception as e:\n        st.error(f\"Authentication error: {str(e)}\")\n        return None\n\ndef register_user(user_data: dict) -> bool:\n    \"\"\"Register a new user.\"\"\"\n    try:\n        # Hash the password before storing\n        user_data['password'] = hash_password(user_data['password'])\n        \n        # Save user to CSV\n        return save_user(user_data)\n    \n    except Exception as e:\n        st.error(f\"Registration error: {str(e)}\")\n        return False\n\ndef logout_user():\n    \"\"\"Log out the current user.\"\"\"\n    for key in list(st.session_state.keys()):\n        del st.session_state[key]\n    \n    st.success(\"Logged out successfully!\")\n    st.rerun()\n","size_bytes":2591},"utils/data_manager.py":{"content":"import pandas as pd\nimport os\nimport csv\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n# File paths for data storage\nDATA_DIR = \"data\"\nUSERS_FILE = os.path.join(DATA_DIR, \"users.csv\")\nROADMAPS_FILE = os.path.join(DATA_DIR, \"roadmaps.csv\")\nINTERACTIONS_FILE = os.path.join(DATA_DIR, \"interactions.csv\")\nCHAT_HISTORY_FILE = os.path.join(DATA_DIR, \"chat_history.csv\")\nPROGRESS_FILE = os.path.join(DATA_DIR, \"progress.csv\")\n\ndef init_data_files():\n    \"\"\"Initialize CSV files if they don't exist.\"\"\"\n    # Create data directory if it doesn't exist\n    os.makedirs(DATA_DIR, exist_ok=True)\n    \n    # Initialize users file\n    if not os.path.exists(USERS_FILE):\n        users_columns = [\n            'name', 'email', 'password', 'experience_level', 'age_group',\n            'interests', 'skills', 'time_commitment', 'learning_style',\n            'short_term_goals', 'long_term_goals', 'created_at', 'updated_at'\n        ]\n        users_df = pd.DataFrame(columns=users_columns)\n        users_df.to_csv(USERS_FILE, index=False)\n    \n    # Initialize roadmaps file\n    if not os.path.exists(ROADMAPS_FILE):\n        roadmaps_columns = [\n            'id', 'user_email', 'title', 'goal', 'timeline', 'difficulty_level',\n            'content', 'progress', 'created_at', 'updated_at'\n        ]\n        roadmaps_df = pd.DataFrame(columns=roadmaps_columns)\n        roadmaps_df.to_csv(ROADMAPS_FILE, index=False)\n    \n    # Initialize interactions file\n    if not os.path.exists(INTERACTIONS_FILE):\n        interactions_columns = [\n            'id', 'user_email', 'interaction_type', 'details', 'timestamp'\n        ]\n        interactions_df = pd.DataFrame(columns=interactions_columns)\n        interactions_df.to_csv(INTERACTIONS_FILE, index=False)\n    \n    # Initialize chat history file\n    if not os.path.exists(CHAT_HISTORY_FILE):\n        chat_columns = [\n            'id', 'user_email', 'role', 'content', 'timestamp'\n        ]\n        chat_df = pd.DataFrame(columns=chat_columns)\n        chat_df.to_csv(CHAT_HISTORY_FILE, index=False)\n    \n    # Initialize progress file\n    if not os.path.exists(PROGRESS_FILE):\n        progress_columns = [\n            'id', 'user_email', 'progress_type', 'description', 'time_spent',\n            'difficulty_rating', 'skills_gained', 'next_steps', 'timestamp'\n        ]\n        progress_df = pd.DataFrame(columns=progress_columns)\n        progress_df.to_csv(PROGRESS_FILE, index=False)\n\ndef load_users() -> pd.DataFrame:\n    \"\"\"Load users from CSV file.\"\"\"\n    try:\n        return pd.read_csv(USERS_FILE)\n    except (FileNotFoundError, pd.errors.EmptyDataError):\n        return pd.DataFrame()\n\ndef save_user(user_data: Dict[str, Any]) -> bool:\n    \"\"\"Save a new user to CSV file.\"\"\"\n    try:\n        users_df = load_users()\n        \n        # Create new user record\n        new_user = pd.DataFrame([user_data])\n        \n        # Append to existing users\n        users_df = pd.concat([users_df, new_user], ignore_index=True)\n        \n        # Save to CSV\n        users_df.to_csv(USERS_FILE, index=False)\n        return True\n    \n    except Exception as e:\n        print(f\"Error saving user: {str(e)}\")\n        return False\n\ndef save_user_profile(user_data: Dict[str, Any]) -> bool:\n    \"\"\"Update user profile in CSV file.\"\"\"\n    try:\n        users_df = load_users()\n        \n        if users_df.empty:\n            return False\n        \n        # Find user by email\n        user_index = users_df[users_df['email'] == user_data['email']].index\n        \n        if len(user_index) == 0:\n            return False\n        \n        # Update user data\n        for key, value in user_data.items():\n            if key in users_df.columns:\n                users_df.loc[user_index[0], key] = value\n        \n        # Save updated data\n        users_df.to_csv(USERS_FILE, index=False)\n        return True\n    \n    except Exception as e:\n        print(f\"Error updating user profile: {str(e)}\")\n        return False\n\ndef save_roadmap(roadmap_data: Dict[str, Any]) -> int:\n    \"\"\"Save a learning roadmap to CSV file.\"\"\"\n    try:\n        roadmaps_df = pd.read_csv(ROADMAPS_FILE) if os.path.exists(ROADMAPS_FILE) else pd.DataFrame()\n        \n        # Generate ID\n        roadmap_id = len(roadmaps_df) + 1\n        roadmap_data['id'] = roadmap_id\n        roadmap_data['created_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        roadmap_data['updated_at'] = roadmap_data['created_at']\n        \n        # Create new roadmap record\n        new_roadmap = pd.DataFrame([roadmap_data])\n        \n        # Append to existing roadmaps\n        roadmaps_df = pd.concat([roadmaps_df, new_roadmap], ignore_index=True)\n        \n        # Save to CSV\n        roadmaps_df.to_csv(ROADMAPS_FILE, index=False)\n        return roadmap_id\n    \n    except Exception as e:\n        print(f\"Error saving roadmap: {str(e)}\")\n        return 0\n\ndef load_user_roadmaps(user_email: str) -> pd.DataFrame:\n    \"\"\"Load roadmaps for a specific user.\"\"\"\n    try:\n        roadmaps_df = pd.read_csv(ROADMAPS_FILE) if os.path.exists(ROADMAPS_FILE) else pd.DataFrame()\n        \n        if roadmaps_df.empty:\n            return pd.DataFrame()\n        \n        return roadmaps_df[roadmaps_df['user_email'] == user_email]\n    \n    except Exception as e:\n        print(f\"Error loading user roadmaps: {str(e)}\")\n        return pd.DataFrame()\n\ndef save_user_interaction(interaction_data: Dict[str, Any]) -> bool:\n    \"\"\"Save user interaction to CSV file.\"\"\"\n    try:\n        interactions_df = pd.read_csv(INTERACTIONS_FILE) if os.path.exists(INTERACTIONS_FILE) else pd.DataFrame()\n        \n        # Generate ID\n        interaction_data['id'] = len(interactions_df) + 1\n        interaction_data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        \n        # Create new interaction record\n        new_interaction = pd.DataFrame([interaction_data])\n        \n        # Append to existing interactions\n        interactions_df = pd.concat([interactions_df, new_interaction], ignore_index=True)\n        \n        # Save to CSV\n        interactions_df.to_csv(INTERACTIONS_FILE, index=False)\n        return True\n    \n    except Exception as e:\n        print(f\"Error saving interaction: {str(e)}\")\n        return False\n\ndef load_user_interactions(user_email: str) -> pd.DataFrame:\n    \"\"\"Load interactions for a specific user.\"\"\"\n    try:\n        interactions_df = pd.read_csv(INTERACTIONS_FILE) if os.path.exists(INTERACTIONS_FILE) else pd.DataFrame()\n        \n        if interactions_df.empty:\n            return pd.DataFrame()\n        \n        return interactions_df[interactions_df['user_email'] == user_email]\n    \n    except Exception as e:\n        print(f\"Error loading user interactions: {str(e)}\")\n        return pd.DataFrame()\n\ndef save_chat_message(message_data: Dict[str, Any]) -> bool:\n    \"\"\"Save chat message to CSV file.\"\"\"\n    try:\n        chat_df = pd.read_csv(CHAT_HISTORY_FILE) if os.path.exists(CHAT_HISTORY_FILE) else pd.DataFrame()\n        \n        # Generate ID\n        message_data['id'] = len(chat_df) + 1\n        message_data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        \n        # Create new message record\n        new_message = pd.DataFrame([message_data])\n        \n        # Append to existing messages\n        chat_df = pd.concat([chat_df, new_message], ignore_index=True)\n        \n        # Save to CSV (keep only last 1000 messages to prevent file from growing too large)\n        chat_df = chat_df.tail(1000)\n        chat_df.to_csv(CHAT_HISTORY_FILE, index=False)\n        return True\n    \n    except Exception as e:\n        print(f\"Error saving chat message: {str(e)}\")\n        return False\n\ndef load_chat_history(user_email: str) -> pd.DataFrame:\n    \"\"\"Load chat history for a specific user.\"\"\"\n    try:\n        chat_df = pd.read_csv(CHAT_HISTORY_FILE) if os.path.exists(CHAT_HISTORY_FILE) else pd.DataFrame()\n        \n        if chat_df.empty:\n            return pd.DataFrame()\n        \n        return chat_df[chat_df['user_email'] == user_email]\n    \n    except Exception as e:\n        print(f\"Error loading chat history: {str(e)}\")\n        return pd.DataFrame()\n\ndef save_progress_entry(progress_data: Dict[str, Any]) -> bool:\n    \"\"\"Save progress entry to CSV file.\"\"\"\n    try:\n        progress_df = pd.read_csv(PROGRESS_FILE) if os.path.exists(PROGRESS_FILE) else pd.DataFrame()\n        \n        # Generate ID\n        progress_data['id'] = len(progress_df) + 1\n        if 'timestamp' not in progress_data:\n            progress_data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        \n        # Create new progress record\n        new_progress = pd.DataFrame([progress_data])\n        \n        # Append to existing progress\n        progress_df = pd.concat([progress_df, new_progress], ignore_index=True)\n        \n        # Save to CSV\n        progress_df.to_csv(PROGRESS_FILE, index=False)\n        return True\n    \n    except Exception as e:\n        print(f\"Error saving progress entry: {str(e)}\")\n        return False\n\ndef load_progress_entries(user_email: str) -> pd.DataFrame:\n    \"\"\"Load progress entries for a specific user.\"\"\"\n    try:\n        progress_df = pd.read_csv(PROGRESS_FILE) if os.path.exists(PROGRESS_FILE) else pd.DataFrame()\n        \n        if progress_df.empty:\n            return pd.DataFrame()\n        \n        user_progress = progress_df[progress_df['user_email'] == user_email]\n        if not user_progress.empty and len(user_progress) > 0:\n            try:\n                return user_progress.sort_values('timestamp', ascending=False)\n            except:\n                return user_progress\n        return pd.DataFrame()\n    \n    except Exception as e:\n        print(f\"Error loading progress entries: {str(e)}\")\n        return pd.DataFrame()\n\ndef get_user_stats(user_email: str) -> Dict[str, Any]:\n    \"\"\"Get comprehensive stats for a user.\"\"\"\n    try:\n        stats = {\n            'total_roadmaps': 0,\n            'total_interactions': 0,\n            'total_chat_messages': 0,\n            'total_progress_entries': 0,\n            'join_date': None,\n            'last_activity': None\n        }\n        \n        # Load user data\n        users_df = load_users()\n        user_data = users_df[users_df['email'] == user_email]\n        \n        if not user_data.empty:\n            stats['join_date'] = user_data.iloc[0]['created_at']\n        \n        # Count roadmaps\n        roadmaps_df = load_user_roadmaps(user_email)\n        stats['total_roadmaps'] = len(roadmaps_df)\n        \n        # Count interactions\n        interactions_df = load_user_interactions(user_email)\n        stats['total_interactions'] = len(interactions_df)\n        \n        # Count chat messages\n        chat_df = load_chat_history(user_email)\n        stats['total_chat_messages'] = len(chat_df[chat_df['role'] == 'user'])\n        \n        # Count progress entries\n        progress_df = load_progress_entries(user_email)\n        stats['total_progress_entries'] = len(progress_df)\n        \n        # Find last activity\n        last_activities = []\n        \n        if not interactions_df.empty:\n            last_activities.append(interactions_df['timestamp'].max())\n        \n        if not chat_df.empty:\n            last_activities.append(chat_df['timestamp'].max())\n        \n        if not progress_df.empty:\n            last_activities.append(progress_df['timestamp'].max())\n        \n        if last_activities:\n            stats['last_activity'] = max(last_activities)\n        \n        return stats\n    \n    except Exception as e:\n        print(f\"Error getting user stats: {str(e)}\")\n        return {}\n","size_bytes":11577},"utils/gemini_client.py":{"content":"import os\nimport json\nimport logging\nfrom google import genai\nfrom google.genai import types\nfrom typing import Dict, Any, List\n\n# Initialize Gemini client\nclient = genai.Client(api_key=os.environ.get(\"GEMINI_API_KEY\", \"default_key\"))\n\ndef generate_project_suggestions(\n    user_data: Dict[str, Any],\n    focus_area: str,\n    difficulty_level: str,\n    project_type: str,\n    timeline: str,\n    num_projects: int,\n    additional_requirements: str = \"\"\n) -> List[Dict[str, Any]]:\n    \"\"\"Generate personalized project suggestions using Gemini API.\"\"\"\n    \n    try:\n        # Build context about the user\n        user_context = f\"\"\"\n        User Profile:\n        - Name: {user_data.get('name', 'User')}\n        - Experience Level: {user_data.get('experience_level', 'Beginner')}\n        - Interests: {user_data.get('interests', 'Not specified')}\n        - Current Skills: {user_data.get('skills', 'Not specified')}\n        - Time Commitment: {user_data.get('time_commitment', 'Not specified')}\n        - Learning Style: {user_data.get('learning_style', 'Mixed approach')}\n        - Short-term Goals: {user_data.get('short_term_goals', 'Not specified')}\n        - Long-term Goals: {user_data.get('long_term_goals', 'Not specified')}\n        \"\"\"\n        \n        prompt = f\"\"\"\n        You are an expert learning mentor and project advisor. Based on the user profile below, generate {num_projects} personalized project suggestions.\n\n        {user_context}\n\n        Project Requirements:\n        - Focus Area: {focus_area}\n        - Difficulty Level: {difficulty_level}\n        - Project Type: {project_type}\n        - Timeline: {timeline}\n        - Additional Requirements: {additional_requirements or 'None'}\n\n        Please generate projects that:\n        1. Match the user's skill level and interests\n        2. Are achievable within the specified timeline\n        3. Provide clear learning outcomes\n        4. Include practical, hands-on experience\n        5. Are relevant to their career goals\n\n        For each project, provide:\n        - Title: A clear, engaging project name\n        - Description: A comprehensive overview of the project\n        - Learning Objectives: 3-5 specific skills/concepts the user will learn\n        - Technologies: List of technologies, tools, and frameworks to be used\n        - Key Features: 4-6 main features or components to implement\n        - Timeline: Detailed breakdown of time estimates\n        - Difficulty: How challenging this project is for the user\n        - Resources: Helpful learning resources, tutorials, or documentation links\n\n        Return the response as a JSON array of project objects.\n        \"\"\"\n        \n        response = client.models.generate_content(\n            model=\"gemini-2.5-flash\",\n            contents=prompt,\n            config=types.GenerateContentConfig(\n                response_mime_type=\"application/json\",\n                temperature=0.7\n            )\n        )\n        \n        if response.text:\n            projects_data = json.loads(response.text)\n            \n            # Ensure we return a list\n            if isinstance(projects_data, dict):\n                projects_data = [projects_data]\n            \n            return projects_data\n        \n        return []\n    \n    except Exception as e:\n        logging.error(f\"Error generating project suggestions: {str(e)}\")\n        return []\n\ndef generate_learning_roadmap(roadmap_data: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Generate a personalized learning roadmap using Gemini API.\"\"\"\n    \n    try:\n        user_data = roadmap_data['user_data']\n        \n        prompt = f\"\"\"\n        You are an expert learning strategist. Create a comprehensive, personalized learning roadmap for the following user and goal.\n\n        User Profile:\n        - Name: {user_data.get('name', 'User')}\n        - Experience Level: {user_data.get('experience_level', 'Beginner')}\n        - Current Skills: {user_data.get('skills', 'Not specified')}\n        - Interests: {user_data.get('interests', 'Not specified')}\n        - Learning Style: {roadmap_data.get('learning_style', 'Mixed approach')}\n        - Time Commitment: {roadmap_data.get('time_per_week', '1-3 hours')} per week\n\n        Learning Goal: {roadmap_data.get('goal', '')}\n        Timeline: {roadmap_data.get('timeline', '3 months')}\n        Difficulty Level: {roadmap_data.get('difficulty_level', 'Intermediate')}\n        Focus Areas: {', '.join(roadmap_data.get('focus_areas', []))}\n        Prior Knowledge: {roadmap_data.get('prior_knowledge', 'Not specified')}\n        Additional Preferences: {roadmap_data.get('preferences', 'None')}\n\n        Create a detailed roadmap with:\n        1. Title: A motivating title for the learning journey\n        2. Overview: A brief description of what the user will achieve\n        3. Phases: Break down learning into 3-6 logical phases, each containing:\n           - Title: Phase name\n           - Duration: Time estimate for this phase\n           - Objective: What the user will accomplish\n           - Topics: Specific topics/concepts to learn\n           - Activities: Practical exercises, projects, or assignments\n           - Resources: Recommended books, courses, tutorials, or tools\n           - Milestones: Measurable checkpoints to track progress\n        4. Additional Resources: Extra materials for deeper learning\n        5. Tips: Personalized study tips based on their learning style and schedule\n\n        Make sure the roadmap is:\n        - Realistic for their timeline and time commitment\n        - Appropriate for their experience level\n        - Aligned with their goals and interests\n        - Actionable with clear next steps\n        - Progressive, building from basic to advanced concepts\n\n        Return as a JSON object.\n        \"\"\"\n        \n        response = client.models.generate_content(\n            model=\"gemini-2.5-pro\",\n            contents=prompt,\n            config=types.GenerateContentConfig(\n                response_mime_type=\"application/json\",\n                temperature=0.6\n            )\n        )\n        \n        if response.text:\n            return json.loads(response.text)\n        \n        return {}\n    \n    except Exception as e:\n        logging.error(f\"Error generating learning roadmap: {str(e)}\")\n        return {}\n\ndef chat_with_mentor(context: Dict[str, Any]) -> str:\n    \"\"\"Chat with AI mentor using conversation context.\"\"\"\n    \n    try:\n        user_data = context['user_profile']\n        chat_history = context.get('chat_history', [])\n        current_message = context['current_message']\n        \n        # Build conversation context\n        conversation_context = \"\"\n        if chat_history:\n            conversation_context = \"\\n\".join([\n                f\"{'User' if msg['role'] == 'user' else 'Mentor'}: {msg['content']}\"\n                for msg in chat_history[-5:]  # Last 5 messages\n            ])\n        \n        system_prompt = f\"\"\"\n        You are an expert AI learning mentor and career advisor. You help students and professionals learn new skills, solve problems, and advance their careers in technology.\n\n        User Profile:\n        - Name: {user_data.get('name', 'User')}\n        - Experience Level: {user_data.get('experience_level', 'Beginner')}\n        - Skills: {user_data.get('skills', 'Not specified')}\n        - Interests: {user_data.get('interests', 'Not specified')}\n        - Goals: {user_data.get('short_term_goals', 'Not specified')}\n\n        Your personality and approach:\n        - Friendly, encouraging, and supportive\n        - Patient and understanding of different learning paces\n        - Practical and focused on actionable advice\n        - Knowledgeable about current technology trends\n        - Good at breaking down complex concepts\n        - Motivational and inspiring\n\n        Guidelines for responses:\n        1. Be conversational and personable\n        2. Provide specific, actionable advice\n        3. Ask clarifying questions when needed\n        4. Suggest concrete next steps\n        5. Reference the user's profile and goals when relevant\n        6. Keep responses focused and not too lengthy\n        7. Include examples and analogies when helpful\n        8. Be encouraging about their progress and potential\n\n        Recent conversation context:\n        {conversation_context}\n\n        Current user message: {current_message}\n\n        Respond as a helpful mentor would, providing guidance, answering questions, and offering support for their learning journey.\n        \"\"\"\n        \n        response = client.models.generate_content(\n            model=\"gemini-2.5-pro\",\n            contents=[\n                types.Content(\n                    role=\"user\", \n                    parts=[types.Part(text=current_message)]\n                )\n            ],\n            config=types.GenerateContentConfig(\n                system_instruction=system_prompt,\n                temperature=0.7,\n                max_output_tokens=1000\n            )\n        )\n        \n        return response.text or \"I apologize, but I'm having trouble processing your message right now. Could you please try rephrasing your question?\"\n    \n    except Exception as e:\n        logging.error(f\"Error in chat with mentor: {str(e)}\")\n        return \"I'm experiencing some technical difficulties right now. Please try again in a moment, or check your API key configuration.\"\n\ndef analyze_learning_progress(progress_data: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Analyze user's learning progress and provide insights.\"\"\"\n    \n    try:\n        prompt = f\"\"\"\n        Analyze the following learning progress data and provide insights and recommendations.\n\n        Progress Data:\n        {json.dumps(progress_data, indent=2)}\n\n        Provide analysis in the following areas:\n        1. Learning Patterns: Identify trends in learning activities and time commitment\n        2. Strengths: Areas where the user is excelling\n        3. Areas for Improvement: Aspects that need more attention\n        4. Recommendations: Specific suggestions for next steps\n        5. Motivation: Encouraging observations about progress\n\n        Return as a JSON object with these sections.\n        \"\"\"\n        \n        response = client.models.generate_content(\n            model=\"gemini-2.5-flash\",\n            contents=prompt,\n            config=types.GenerateContentConfig(\n                response_mime_type=\"application/json\",\n                temperature=0.6\n            )\n        )\n        \n        if response.text:\n            return json.loads(response.text)\n        \n        return {}\n    \n    except Exception as e:\n        logging.error(f\"Error analyzing learning progress: {str(e)}\")\n        return {}\n","size_bytes":10673}},"version":1}