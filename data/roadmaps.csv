id,user_email,title,goal,timeline,difficulty_level,content,progress,created_at,updated_at
1,yashmishra654@gmail.com,Code Kickstarter: Your 2-Month Journey to Python & SQL Fundamentals,"Coding Professional in Python, SQL",2 months,Beginner,"{'title': 'Code Kickstarter: Your 2-Month Journey to Python & SQL Fundamentals', 'overview': 'This roadmap is designed for Yash Mishra, a beginner with a goal to become a coding professional. Given the 2-month timeline and 1-3 hour weekly commitment, this plan focuses on building a strong, foundational understanding of Python programming and SQL database querying. By the end, you will have the essential skills and confidence to tackle more complex topics and continue your journey toward professional proficiency.', 'phases': [{'title': 'Phase 1: Python Kickstart - The Absolute Basics', 'duration': '3 Weeks', 'objective': 'Understand the fundamental building blocks of programming using Python. You will learn how to write simple scripts, handle data, and control the flow of your program.', 'topics': ['What is Programming? What is Python?', 'Setting up your Environment (Python & a code editor like VS Code)', 'Variables and Data Types (Strings, Integers, Floats, Booleans)', 'Basic Operators (Arithmetic, Comparison, Logical)', 'Handling User Input and Printing Output', 'Conditional Logic (if, elif, else statements)'], 'activities': [""Write a 'Hello, [Your Name]!' program."", 'Create a simple calculator that takes two numbers and an operator from the user.', ""Build a script that asks for a user's age and tells them if they are eligible to vote.""], 'resources': [{'name': 'freeCodeCamp - Python for Beginners', 'type': 'Video Course', 'url': 'https://www.youtube.com/watch?v=rfscVS0vtbw'}, {'name': 'W3Schools - Python Tutorial', 'type': 'Interactive Tutorial', 'url': 'https://www.w3schools.com/python/'}, {'name': 'Python.org - The Python Tutorial', 'type': 'Documentation/Reading', 'url': 'https://docs.python.org/3/tutorial/index.html'}], 'milestones': ['Successfully set up your Python development environment.', 'Write and run a Python script that uses variables, input, and conditional logic.']}, {'title': 'Phase 2: Structuring Code with Data Collections & Loops', 'duration': '2 Weeks', 'objective': 'Learn how to handle collections of data and repeat tasks efficiently using loops. This phase introduces you to fundamental data structures.', 'topics': ['Lists: Creating, Indexing, Slicing, and Modifying', ""Loops: 'for' loops to iterate over sequences, 'while' loops for repeated actions"", 'Introduction to Dictionaries: Key-Value pairs', 'Basic String Manipulation'], 'activities': [""Create a program that stores a list of your favorite foods and prints each one using a 'for' loop."", ""Develop a simple number guessing game using a 'while' loop."", 'Store user information (name, city, age) in a dictionary and print it.'], 'resources': [{'name': 'Codecademy - Learn Python 3 (Free Course)', 'type': 'Interactive Course', 'url': 'https://www.codecademy.com/learn/learn-python-3'}, {'name': 'HackerRank - Python (Basic) Practice', 'type': 'Practice Problems', 'url': 'https://www.hackerrank.com/domains/python'}], 'milestones': [""Write a script that correctly uses a 'for' loop to iterate through a list."", 'Create and access data within a Python dictionary.']}, {'title': 'Phase 3: Speaking to Databases with SQL', 'duration': '2 Weeks', 'objective': 'Understand the role of databases and learn the basics of SQL to retrieve specific information from them.', 'topics': ['What is a Relational Database?', 'The `SELECT` and `FROM` clauses', 'Filtering data with the `WHERE` clause', 'Sorting results with `ORDER BY`', 'Introduction to `JOIN` to combine data from multiple tables'], 'activities': ['Complete interactive exercises to practice writing queries.', ""Given a sample database schema, write queries to answer specific questions like 'Find all users from New York' or 'List all products under $50'.""], 'resources': [{'name': 'SQLBolt', 'type': 'Interactive Tutorial', 'url': 'https://sqlbolt.com/'}, {'name': 'Khan Academy - Intro to SQL', 'type': 'Video/Interactive Course', 'url': 'https://www.khanacademy.org/computing/computer-programming/sql'}, {'name': 'W3Schools - SQL Tutorial', 'type': 'Interactive Tutorial', 'url': 'https://www.w3schools.com/sql/'}], 'milestones': ['Write a SQL query that retrieves specific columns from a table with filtering.', 'Successfully write a query that joins two tables and sorts the result.']}, {'title': 'Phase 4: Integration - Python Meets SQL', 'duration': '1 Week', 'objective': 'Combine your new skills by using a Python script to interact with a database, a common task for many programming roles.', 'topics': [""Introduction to Python's `sqlite3` module"", 'Connecting to a database', 'Executing a query from a Python script', 'Fetching and printing the results'], 'activities': ['Download a sample SQLite database (e.g., Chinook database).', 'Write a Python script that connects to the database, queries for all artists from a specific country, and prints their names to the console.'], 'resources': [{'name': 'Real Python - Using SQLite With Python', 'type': 'Article/Tutorial', 'url': 'https://realpython.com/python-sql-libraries/#sqlite'}, {'name': 'SQLite Tutorial - Chinook Database', 'type': 'Sample Database', 'url': 'https://www.sqlitetutorial.net/sqlite-sample-database/'}], 'milestones': ['Successfully execute a Python script that connects to a database, runs a query, and displays the results.']}], 'additionalResources': [{'name': 'Stack Overflow', 'description': 'The largest online community for programmers to learn, share knowledge, and build their careers. Essential for troubleshooting.', 'url': 'https://stackoverflow.com/'}, {'name': 'GitHub', 'description': ""A platform for version control and collaboration. Start by exploring other people's code to see how projects are built."", 'url': 'https://github.com/'}, {'name': 'Automate the Boring Stuff with Python', 'description': 'A highly-recommended free online book that teaches Python through practical examples.', 'url': 'https://automatetheboringstuff.com/'}], 'tips': [{'tip': 'Consistency Over Intensity', 'description': ""With 1-3 hours a week, it's better to have three 40-minute sessions than one long 2-hour session. This helps with retention and makes learning a consistent habit.""}, {'tip': 'Embrace Your Mixed Learning Style', 'description': 'Alternate your activities. Watch a video tutorial for 30 minutes, then spend the next 30 minutes writing code and solving a related problem. This will keep you engaged and cater to your learning preference.'}, {'tip': 'Code Every Session', 'description': 'Never end a study session without writing at least a few lines of code. Active participation is key to making concepts stick, no matter how small the program is.'}, {'tip': ""Don't Be Afraid to Google"", 'description': ""No developer knows everything. A core professional skill is knowing how to find answers. If you're stuck, try to phrase your problem as a search query. It's a skill in itself.""}, {'tip': 'Focus on Understanding, Not Memorizing', 'description': ""The goal isn't to memorize every command. It's to understand the concepts (like what a loop is for, or why you need a WHERE clause). You can always look up the exact syntax.""}]}",0,2025-09-04 20:52:35,2025-09-04 20:52:35
2,yashmishra654@gmail.com,Yash's Coding Launchpad: From Zero to Python & SQL Foundation,"Coding Professional in Python, SQL",2 months,Beginner,"{'title': ""Yash's Coding Launchpad: From Zero to Python & SQL Foundation"", 'overview': 'This 2-month roadmap is designed for Yash Mishra, a beginner with a commitment of 1-3 hours per week. The goal is not to become a professional in this short time, but to build a strong, foundational understanding of Python programming and SQL database querying. By the end of this journey, you will have the essential skills and confidence to tackle more complex projects and continue your path toward becoming a coding professional.', 'phases': [{'title': 'Phase 1: Python Kickstart', 'duration': 'Weeks 1-2', 'objective': 'Grasp the absolute fundamentals of programming using Python. You will learn to set up your environment, understand basic syntax, and write your first simple programs.', 'topics': ['What is Programming?', 'Setting up Python and a Code Editor (VS Code)', 'Variables and Data Types (Strings, Integers, Floats)', 'Basic Arithmetic Operators (+, -, *, /)', 'Getting User Input (input())', 'Printing Output (print())', 'String Concatenation and Formatting'], 'activities': [{'name': 'Hello, World!', 'description': 'Write and run your very first Python script.'}, {'name': 'Simple Calculator', 'description': 'Create a program that takes two numbers from a user and prints their sum, difference, and product.'}, {'name': 'Personal Greeter', 'description': ""Write a script that asks for the user's name and city, then prints a personalized greeting message.""}], 'resources': [{'type': 'Video Course', 'name': 'Python for Everybody - Full University Python Course by freeCodeCamp', 'url': 'https://www.youtube.com/watch?v=8DvywoWv6fI'}, {'type': 'Interactive Tutorial', 'name': 'Codecademy: Learn Python 3 (Free Course)', 'url': 'https://www.codecademy.com/learn/learn-python-3'}, {'type': 'Tool', 'name': 'Replit', 'description': 'An online code editor that requires no setup, perfect for quick practice sessions.', 'url': 'https://replit.com/'}], 'milestones': ['Successfully install Python and VS Code on your computer.', 'Write and run three different Python scripts without errors.', 'Explain the difference between a string and an integer.']}, {'title': 'Phase 2: Building Logic with Python', 'duration': 'Weeks 3-4', 'objective': 'Learn how to control the flow of your programs using logic and loops, and how to organize data using lists.', 'topics': ['Booleans (True/False) and Comparison Operators (==, !=, >, <)', 'Conditional Statements (if, elif, else)', 'Data Structures: Lists (creating, indexing, appending)', ""Loops: 'for' loops and 'while' loops"", 'Introduction to Functions (defining and calling)'], 'activities': [{'name': 'Number Guessing Game', 'description': ""Create a game where the program picks a secret number and the user has a few tries to guess it, with hints like 'too high' or 'too low'.""}, {'name': 'Simple To-Do List', 'description': 'Write a program that stores to-do items in a list and can print all the items.'}, {'name': 'Basic Function Creation', 'description': 'Create a function that takes a name as an argument and returns a greeting string.'}], 'resources': [{'type': 'Video Series', 'name': 'Corey Schafer: Python Programming Beginner Tutorials', 'url': 'https://www.youtube.com/playlist?list=PL-osiE80TeTskP9Tf_YI1v5w3_Y2Iu3s-'}, {'type': 'Practice Platform', 'name': 'HackerRank', 'description': 'Solve beginner-level Python challenges.', 'url': 'https://www.hackerrank.com/domains/python'}], 'milestones': ['Write a program that uses an if/elif/else block correctly.', ""Use a 'for' loop to iterate over a list and print each item."", 'Define and successfully call a custom function.']}, {'title': 'Phase 3: Introduction to SQL & Databases', 'duration': 'Weeks 5-6', 'objective': 'Understand what databases are and learn the fundamental SQL commands to retrieve and filter data from a table.', 'topics': ['What is a Relational Database? (Tables, Rows, Columns)', 'What is SQL?', 'The `SELECT` and `FROM` clauses', 'Filtering data with the `WHERE` clause', 'Sorting results with `ORDER BY`', 'Limiting results with `LIMIT`'], 'activities': [{'name': 'Practice Queries', 'description': ""Use an online SQL sandbox to practice writing queries. For example, select all users from a 'users' table, then select only users from a specific city, and finally, order them by name.""}], 'resources': [{'type': 'Video Course', 'name': 'SQL for Beginners Full Course by freeCodeCamp', 'url': 'https://www.youtube.com/watch?v=HXV3zeQKqGY'}, {'type': 'Interactive Tutorial', 'name': 'Khan Academy: Intro to SQL', 'url': 'https://www.khanacademy.org/computing/computer-programming/sql'}, {'type': 'Tool', 'name': 'SQL Fiddle', 'description': 'An online tool to experiment with SQL queries on sample databases without any installation.', 'url': 'http://sqlfiddle.com/'}], 'milestones': ['Explain the concepts of a table, row, and column.', 'Write a SQL query that retrieves specific columns from a table.', 'Write a SQL query that filters data using a `WHERE` clause and sorts it with `ORDER BY`.']}, {'title': 'Phase 4: Connecting Python with SQL', 'duration': 'Weeks 7-8', 'objective': 'Bridge the gap between your programming and database skills by learning how to make a Python script interact with a simple database.', 'topics': ['Introduction to the `sqlite3` module in Python', 'Connecting to an SQLite database', 'Creating a cursor object', 'Executing `SELECT` queries from Python', 'Fetching and iterating over the results'], 'activities': [{'name': 'Database Viewer Script', 'description': 'Download a sample SQLite database file. Write a Python script that connects to this database, retrieves all records from a specific table, and prints each record to the console.'}], 'resources': [{'type': 'Video Tutorial', 'name': 'Corey Schafer: Python SQLite Tutorial', 'url': 'https://www.youtube.com/watch?v=pd-0G0MigUA'}, {'type': 'Documentation', 'name': 'Official Python `sqlite3` Documentation', 'url': 'https://docs.python.org/3/library/sqlite3.html'}, {'type': 'Resource', 'name': 'Sample SQLite Databases', 'url': 'https://www.sqlitetutorial.net/sqlite-sample-database/'}], 'milestones': ['Successfully connect to an SQLite database using a Python script.', 'Execute a `SELECT` query from your script.', 'Loop through the fetched data and print it in a user-friendly format.']}], 'additionalResources': [{'name': 'Stack Overflow', 'description': 'The most popular community for programmers to ask and answer questions. Learn to search for your errors here before asking.', 'url': 'https://stackoverflow.com/'}, {'name': 'r/learnprogramming', 'description': 'A Reddit community for new programmers. Great for asking questions and seeing what others are learning.', 'url': 'https://www.reddit.com/r/learnprogramming/'}, {'name': 'GitHub', 'description': ""Start getting familiar with this platform. It's where you'll eventually store your code and collaborate with others."", 'url': 'https://github.com/'}], 'tips': [{'title': 'Embrace the Mixed Approach: Watch, Read, Do', 'description': ""For each topic, first watch a video tutorial to get a high-level understanding. Then, read a short article or official documentation to solidify the details. Most importantly, immediately apply what you've learned by writing your own code. This cycle is key for retention.""}, {'title': 'Consistency Over Cramming', 'description': ""With 1-3 hours a week, it's better to have two 1-hour sessions than one long 2-hour session. Consistent, spaced-out practice helps your brain absorb information more effectively. Use tools like Replit to sneak in 20-30 minutes of practice on your phone or any computer.""}, {'title': 'Focus on Understanding, Not Memorizing', 'description': ""Don't try to memorize every piece of syntax. Focus on understanding the core concepts (what a loop is for, why you need a variable). It's normal and expected for even professional developers to look up syntax constantly.""}, {'title': 'Errors Are Your Friends', 'description': 'You will encounter countless errors. Do not get discouraged. Each error message is a clue. Practice reading them carefully and pasting them into Google. Learning to debug is a fundamental skill of a programmer.'}]}",0,2025-09-04 20:54:00,2025-09-04 20:54:00
3,yashmishra654@gmail.com,AI Engineer Launchpad: Mastering Python Fundamentals,Become an AI Engineer,2 months,Beginner,"{'title': 'AI Engineer Launchpad: Mastering Python Fundamentals', 'overview': 'This 2-month roadmap is designed for Yash Mishra to build a rock-solid programming foundation, the essential first step on the journey to becoming an AI Engineer. Given your time commitment, this plan focuses on mastering the core Python skills and libraries used for data manipulation and analysis, preparing you for more advanced machine learning topics.', 'phases': [{'title': 'Phase 1: Python Core Reinforcement', 'duration': '2 Weeks (2-6 hours total)', 'objective': 'To solidify your understanding of fundamental Python syntax, logic, and structure, moving from a beginner to a confident practitioner.', 'topics': ['Advanced Control Flow (nested loops, break/continue)', 'Functions (arguments, return values, scope)', 'Error Handling (try, except blocks)', 'Introduction to Object-Oriented Programming (Classes and Objects)'], 'activities': [""Solve 5 'Easy' Python problems on HackerRank or LeetCode focusing on functions and loops."", 'Write a simple script that reads a text file and counts the frequency of each word.'], 'resources': [{'name': 'Python for Everybody (PY4E)', 'type': 'Course', 'link': 'https://www.py4e.com/lessons'}, {'name': 'Automate the Boring Stuff with Python', 'type': 'Book/Website', 'link': 'https://automatetheboringstuff.com/'}], 'milestones': ['Successfully write and run a Python script with at least two functions and error handling.', 'Gain confidence in explaining the difference between a list and a tuple, and a dictionary and a set.']}, {'title': 'Phase 2: Data Structures in Depth', 'duration': '2 Weeks (2-6 hours total)', 'objective': ""To gain proficiency in using Python's core data structures, which are the building blocks for handling complex data in AI."", 'topics': ['Lists and Tuples (slicing, methods)', 'Dictionaries and Sets (operations, use cases)', 'List Comprehensions for efficient code', 'Working with Files (reading/writing CSV and TXT)'], 'activities': ['Create a simple command-line contact book application that uses a dictionary to store contacts and can save/load them from a file.', ""Refactor a 'for' loop from a previous exercise to use a list comprehension.""], 'resources': [{'name': 'Real Python Tutorials', 'type': 'Website/Tutorials', 'link': 'https://realpython.com/'}, {'name': 'Python Data Structures Course', 'type': 'Course', 'link': 'https://www.coursera.org/learn/python-data-structures'}], 'milestones': ['Build a multi-file script that successfully reads data, processes it using dictionaries, and writes the output.', 'Comfortably use list comprehensions to create new lists from existing ones.']}, {'title': ""Phase 3: The Data Scientist's Toolkit: NumPy & Pandas"", 'duration': '2 Weeks (2-6 hours total)', 'objective': 'To learn the fundamentals of the two most critical libraries for data science and AI in Python: NumPy for numerical operations and Pandas for data manipulation.', 'topics': ['NumPy: Creating arrays, vectorization, and basic mathematical operations.', 'Pandas: Introduction to Series and DataFrames.', 'Data Loading: Reading CSV files into a DataFrame (leveraging your SQL knowledge).', 'Data Selection & Filtering: Using `.loc`, `.iloc`, and boolean indexing.'], 'activities': ['Download a simple dataset from Kaggle (e.g., Iris dataset).', 'Load the dataset into a Pandas DataFrame.', 'Perform basic data exploration: check the first 5 rows (`.head()`), get summary statistics (`.describe()`), and find the number of rows/columns (`.shape`).', 'Select and filter data based on specific criteria (e.g., select all rows where a column value is greater than a certain number).'], 'resources': [{'name': 'Data Analysis with Python', 'type': 'Course', 'link': 'https://www.freecodecamp.org/learn/data-analysis-with-python/'}, {'name': '10 minutes to pandas', 'type': 'Documentation/Tutorial', 'link': 'https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html'}], 'milestones': ['Successfully load, inspect, and filter a dataset from a CSV file using Pandas.', 'Explain the difference between a Pandas Series and a DataFrame.']}, {'title': 'Phase 4: Data Visualization & Capstone Project', 'duration': '2 Weeks (2-6 hours total)', 'objective': 'To learn the basics of data visualization and to integrate all learned concepts into a single mini-project that showcases your new skills.', 'topics': ['Introduction to Matplotlib and Seaborn for plotting.', 'Creating basic plots: Histograms, Bar Charts, and Scatter Plots.', 'Data Cleaning: Handling missing values (e.g., using `.dropna()` or `.fillna()`).', 'Project planning and execution.'], 'activities': ['**Capstone Project:** Analyze a simple dataset of your choice (e.g., Titanic dataset from Kaggle).', '1. Load the data using Pandas.', '2. Perform simple data cleaning.', '3. Calculate summary statistics (e.g., average age, survival rate).', '4. Create 2-3 meaningful visualizations (e.g., a bar chart of survival by gender, a histogram of passenger ages).', '5. Write a brief summary of your findings in a Jupyter Notebook.'], 'resources': [{'name': 'Kaggle', 'type': 'Platform', 'link': 'https://www.kaggle.com/datasets'}, {'name': 'Seaborn Official Tutorial', 'type': 'Documentation/Tutorial', 'link': 'https://seaborn.pydata.org/tutorial.html'}, {'name': 'Jupyter Notebook', 'type': 'Tool', 'link': 'https://jupyter.org/'}], 'milestones': ['Create and present a complete Jupyter Notebook that tells a simple story with data, from loading to visualization.', 'Produce at least two different types of plots to represent data.']}], 'additional_resources': [{'name': 'Python for Data Analysis, 2nd Edition by Wes McKinney', 'type': 'Book', 'description': 'The definitive book on Pandas, written by its creator. A great reference to have as you progress.'}, {'name': 'Kaggle Learn Courses', 'type': 'Micro-courses', 'description': 'Short, hands-on courses on Python, Pandas, and Data Visualization that are excellent for practice.'}, {'name': 'DataCamp', 'type': 'Platform', 'description': 'Offers interactive courses on Python for data science, which can be a great supplement to your learning.'}], 'tips': [{'tip': 'Consistency Over Intensity', 'description': ""With a 1-3 hour weekly commitment, it's better to study for 30 minutes 3-4 times a week than to cram for 3 hours once. This helps with retention and makes learning a consistent habit.""}, {'tip': 'Leverage Your SQL Knowledge', 'description': 'The concepts of selecting columns, filtering rows (`WHERE` clause), and grouping data (`GROUP BY`) from SQL have direct parallels in Pandas. Thinking about data manipulation in SQL terms can help you learn Pandas faster.'}, {'tip': ""Embrace the 'Mixed Approach'"", 'description': 'Your learning style is a strength. Watch a video tutorial to grasp a concept, read an article or documentation for depth, and then immediately apply it in a hands-on project to solidify your understanding.'}, {'tip': ""Don't Just Code, Articulate"", 'description': 'After you solve a problem or build a small project, try to explain how it works out loud or by writing it down. This active recall technique will reveal gaps in your understanding and cement your knowledge.'}]}",0,2025-09-04 23:58:45,2025-09-04 23:58:45
4,yashmishra654@gmail.com,Gridlock Gauntlet: Your Python Puzzle Masterclass,"Complete the project: Gridlock Gauntlet: Block Buster - Develop a simple grid-based puzzle game inspired by Sokoban, where the player pushes blocks to designated target spots. This project will challenge you to think about game state management, grid logic, level design, and win condition detection within a structured environment using a popular game engine.",2 weeks,Beginner,"{'title': 'Gridlock Gauntlet: Your Python Puzzle Masterclass', 'overview': 'A 2-week journey for Yash Mishra to build a complete, text-based Sokoban-style puzzle game from scratch using Python. You will master core programming concepts like grid logic, state management, and input handling, culminating in a playable game you created yourself.', 'phases': [{'title': 'Phase 1: The Blueprint - Board & Game Loop', 'duration': '1.5 hours (Week 1)', 'objective': 'Set up the fundamental game structure, represent the game level in code, and display it in the console.', 'topics': ['Python Environment Setup (if needed)', '2D Lists (Lists of Lists) for the Grid', 'Representing Game Elements (Wall, Player, Empty Space)', 'Basic Functions', ""The Main 'Game Loop' (while loop)"", 'Printing to the Console'], 'activities': ['Create a Python script.', 'Define a function `create_level()` that returns a 2D list representing your first game level.', 'Define a function `print_board(board)` that iterates through the 2D list and prints it neatly to the console.', 'Create a main game loop that clears the console and calls `print_board()` in each iteration.'], 'resources': [{'name': 'Python Lists (Official Docs)', 'type': 'Documentation', 'url': 'https://docs.python.org/3/tutorial/datastructures.html'}, {'name': 'Making a Text-Based Game (Tutorial)', 'type': 'Article/Tutorial', 'url': 'https://realpython.com/python-rock-paper-scissors/'}], 'milestones': ['A static game board is successfully printed to the console when the script is run.']}, {'title': 'Phase 2: Taking Control - Player Movement', 'duration': '1.5 hours (Week 1)', 'objective': 'Implement logic to allow the player to move around the game board and interact with walls.', 'topics': ['Handling User Input (`input()` function)', 'Storing Player Coordinates (x, y)', 'Conditional Logic (`if/elif/else`)', 'Updating List Data', 'Boundary and Collision Checking (vs. Walls)'], 'activities': [""Track the player's position using two variables, `player_x` and `player_y`."", ""Inside the game loop, ask the user for input ('w', 'a', 's', 'd')."", ""Write logic to calculate the player's next position based on the input."", ""Check if the next position is a wall. If not, update the player's coordinates on the board."", ""Ensure the player's old position is set back to an empty space.""], 'resources': [{'name': 'Handling User Input in Python', 'type': 'Video Tutorial', 'url': 'https://www.youtube.com/watch?v=y_6aA4d3AS0'}, {'name': 'Python Control Flow (if/else)', 'type': 'Documentation', 'url': 'https://docs.python.org/3/tutorial/controlflow.html'}], 'milestones': ['Player character can be moved around the console-based map using keyboard input.', 'Player is correctly blocked by walls.']}, {'title': 'Phase 3: The Core Mechanic - Pushing Blocks', 'duration': '1.5 hours (Week 2)', 'objective': 'Implement the main puzzle mechanic: allowing the player to push blocks.', 'topics': ['Advanced Collision Detection (Player -> Block -> Wall/Space)', 'Nested Conditional Logic', 'Game State Management', 'Updating multiple elements in the 2D list in a single turn'], 'activities': [""Add blocks ('$') and target locations ('.') to your level data."", 'Modify the movement logic: when the player tries to move into a block, check the space *behind* the block.', 'If the space behind the block is empty or a target, move both the player and the block.', 'If the space behind the block is a wall or another block, prevent the movement.'], 'resources': [{'name': 'Think Like a Programmer (Problem Solving)', 'type': 'Article', 'url': 'https://www.freecodecamp.org/news/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2/'}], 'milestones': ['The player can successfully push a block into an empty space.', 'The player cannot push a block through a wall or into another block.']}, {'title': 'Phase 4: The Finish Line - Win Condition', 'duration': '1.5 hours (Week 2)', 'objective': 'Define and implement the logic to detect when the puzzle has been solved.', 'topics': ['Storing original target locations', 'Iterating through the board to check conditions', 'Boolean flags for game state (e.g., `is_won`)', 'Breaking the game loop', 'Displaying a victory message'], 'activities': ['Create a separate list to store the coordinates of all target locations for the level.', 'Create a function `check_win(board, targets)` that runs after every successful move.', 'Inside the function, loop through the target coordinates and check if each one has a block on it.', 'If all targets are covered, set a `game_won` variable to `True`.', ""Modify the main game loop to stop running when `game_won` is `True` and print a 'You Win!' message.""], 'resources': [{'name': 'Python Functions (TutorialsPoint)', 'type': 'Article/Tutorial', 'url': 'https://www.tutorialspoint.com/python/python_functions.htm'}], 'milestones': ['The game correctly identifies when all blocks are on all target spots.', 'A victory message is displayed and the game ends.']}], 'additional_resources': [{'name': 'Pygame Library', 'description': ""Once you've mastered the text-based logic, try rebuilding your game with simple graphics using the Pygame library."", 'url': 'https://www.pygame.org/news'}, {'name': 'Sokoban Wiki', 'description': 'Explore the history of Sokoban and get ideas for new levels and puzzle mechanics.', 'url': 'https://sokoban.info/'}, {'name': 'Python Data Structures In-Depth', 'description': 'For a deeper understanding of how to manage your game data more efficiently.', 'url': 'https://realpython.com/python-data-structures/'}], 'tips': [{'category': 'For Your Learning Style (Mixed)', 'tip': ""Start each phase by reading a short article or watching a tutorial on the key topic (e.g., 2D lists). Then, immediately switch to coding and try to implement it yourself without looking. Refer back only when you're truly stuck.""}, {'category': 'For Your Time Commitment (1-3 hours/week)', 'tip': ""Your goal for each session is to complete one 'Activity'. Don't try to finish a whole phase at once. Focus on making one small, tangible piece of progress each time you sit down to code.""}, {'category': 'For Your Experience Level (Beginner)', 'tip': ""Use `print()` statements liberally to debug your code. For example, `print(f'Player trying to move to {next_x}, {next_y}')`. This helps you see what your program is 'thinking' and find bugs quickly.""}, {'category': 'General Tip', 'tip': 'Start with the simplest possible level: a 5x5 box with one player, one block, and one target. Solving the logic for a simple case makes it much easier to scale up to more complex levels later.'}]}",0,2025-09-05 00:09:09,2025-09-05 00:09:09
